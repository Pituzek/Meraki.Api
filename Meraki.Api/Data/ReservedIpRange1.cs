/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// ReservedIpRange1
	/// </summary>
	[DataContract]
    public partial class ReservedIpRange1 :  IEquatable<ReservedIpRange1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReservedIpRange1" /> class.
        /// </summary>
        [JsonConstructor]
        protected ReservedIpRange1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReservedIpRange1" /> class.
        /// </summary>
        /// <param name="Start">The first IP in the reserved range (required).</param>
        /// <param name="End">The last IP in the reserved range (required).</param>
        /// <param name="Comment">A text comment for the reserved range (required).</param>
        public ReservedIpRange1(string Start = default, string End = default, string Comment = default)
        {
            // to ensure "Start" is required (not null)
            if (Start == null)
            {
                throw new InvalidDataException("Start is a required property for ReservedIpRange1 and cannot be null");
            }
            else
            {
                this.Start = Start;
            }
            // to ensure "End" is required (not null)
            if (End == null)
            {
                throw new InvalidDataException("End is a required property for ReservedIpRange1 and cannot be null");
            }
            else
            {
                this.End = End;
            }
            // to ensure "Comment" is required (not null)
            if (Comment == null)
            {
                throw new InvalidDataException("Comment is a required property for ReservedIpRange1 and cannot be null");
            }
            else
            {
                this.Comment = Comment;
            }
        }

        /// <summary>
        /// The first IP in the reserved range
        /// </summary>
        /// <value>The first IP in the reserved range</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }
        /// <summary>
        /// The last IP in the reserved range
        /// </summary>
        /// <value>The last IP in the reserved range</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public string End { get; set; }
        /// <summary>
        /// A text comment for the reserved range
        /// </summary>
        /// <value>A text comment for the reserved range</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReservedIpRange1 {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as ReservedIpRange1);
        }

        /// <summary>
        /// Returns true if ReservedIpRange1 instances are equal
        /// </summary>
        /// <param name="other">Instance of ReservedIpRange1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReservedIpRange1 other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Start == other.Start ||
						  Start != null &&
						  Start.Equals(other.Start)
					 ) &&
					 (
						  End == other.End ||
						  End != null &&
						  End.Equals(other.End)
					 ) &&
					 (
						  Comment == other.Comment ||
						  Comment != null &&
						  Comment.Equals(other.Comment)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Start != null)
                    hash = hash * 59 + Start.GetHashCode();
                if (End != null)
                    hash = hash * 59 + End.GetHashCode();
                if (Comment != null)
                    hash = hash * 59 + Comment.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
