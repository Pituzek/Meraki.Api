/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// PortRule
	/// </summary>
	[DataContract]
    public partial class PortRule :  IEquatable<PortRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortRule" /> class.
        /// </summary>
        /// <param name="Name">A description of the rule.</param>
        /// <param name="Protocol">Protocol.</param>
        /// <param name="PublicPort">Destination port of the traffic that is arriving on the WAN.</param>
        /// <param name="LocalIp">Local IP address to which traffic will be forwarded.</param>
        /// <param name="LocalPort">Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port.</param>
        /// <param name="AllowedIps">Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;.</param>
        public PortRule(string Name = default, Protocol3 Protocol = default, string PublicPort = default, string LocalIp = default, string LocalPort = default, List<string> AllowedIps = default)
        {
            this.Name = Name;
            this.Protocol = Protocol;
            this.PublicPort = PublicPort;
            this.LocalIp = LocalIp;
            this.LocalPort = LocalPort;
            this.AllowedIps = AllowedIps;
        }

        /// <summary>
        /// A description of the rule
        /// </summary>
        /// <value>A description of the rule</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public Protocol3 Protocol { get; set; }
        /// <summary>
        /// Destination port of the traffic that is arriving on the WAN
        /// </summary>
        /// <value>Destination port of the traffic that is arriving on the WAN</value>
        [DataMember(Name="publicPort", EmitDefaultValue=false)]
        public string PublicPort { get; set; }
        /// <summary>
        /// Local IP address to which traffic will be forwarded
        /// </summary>
        /// <value>Local IP address to which traffic will be forwarded</value>
        [DataMember(Name="localIp", EmitDefaultValue=false)]
        public string LocalIp { get; set; }
        /// <summary>
        /// Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
        /// </summary>
        /// <value>Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port</value>
        [DataMember(Name="localPort", EmitDefaultValue=false)]
        public string LocalPort { get; set; }
        /// <summary>
        /// Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;
        /// </summary>
        /// <value>Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;</value>
        [DataMember(Name="allowedIps", EmitDefaultValue=false)]
        public List<string> AllowedIps { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortRule {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  PublicPort: ").Append(PublicPort).Append("\n");
            sb.Append("  LocalIp: ").Append(LocalIp).Append("\n");
            sb.Append("  LocalPort: ").Append(LocalPort).Append("\n");
            sb.Append("  AllowedIps: ").Append(AllowedIps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as PortRule);
        }

        /// <summary>
        /// Returns true if PortRule instances are equal
        /// </summary>
        /// <param name="other">Instance of PortRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortRule other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  Name != null &&
						  Name.Equals(other.Name)
					 ) &&
					 (
						  Protocol == other.Protocol ||
						  Protocol != null &&
						  Protocol.Equals(other.Protocol)
					 ) &&
					 (
						  PublicPort == other.PublicPort ||
						  PublicPort != null &&
						  PublicPort.Equals(other.PublicPort)
					 ) &&
					 (
						  LocalIp == other.LocalIp ||
						  LocalIp != null &&
						  LocalIp.Equals(other.LocalIp)
					 ) &&
					 (
						  LocalPort == other.LocalPort ||
						  LocalPort != null &&
						  LocalPort.Equals(other.LocalPort)
					 ) &&
					 (
						  AllowedIps == other.AllowedIps ||
						  AllowedIps != null &&
						  AllowedIps.SequenceEqual(other.AllowedIps)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hash = hash * 59 + Name.GetHashCode();
                if (Protocol != null)
                    hash = hash * 59 + Protocol.GetHashCode();
                if (PublicPort != null)
                    hash = hash * 59 + PublicPort.GetHashCode();
                if (LocalIp != null)
                    hash = hash * 59 + LocalIp.GetHashCode();
                if (LocalPort != null)
                    hash = hash * 59 + LocalPort.GetHashCode();
                if (AllowedIps != null)
                    hash = hash * 59 + AllowedIps.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
