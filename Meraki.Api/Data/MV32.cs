/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Quality and resolution for MV32 camera models.
	/// </summary>
	[DataContract]
    public partial class MV32 :  IEquatable<MV32>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MV32" /> class.
        /// </summary>
        [JsonConstructor]
        protected MV32() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MV32" /> class.
        /// </summary>
        /// <param name="Quality">Quality (required).</param>
        /// <param name="Resolution">Resolution (required).</param>
        public MV32(Quality3 Quality = default, Resolution2 Resolution = default)
        {
            // to ensure "Quality" is required (not null)
            if (Quality == null)
            {
                throw new InvalidDataException("Quality is a required property for MV32 and cannot be null");
            }
            else
            {
                this.Quality = Quality;
            }
            // to ensure "Resolution" is required (not null)
            if (Resolution == null)
            {
                throw new InvalidDataException("Resolution is a required property for MV32 and cannot be null");
            }
            else
            {
                this.Resolution = Resolution;
            }
        }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name="quality", EmitDefaultValue=false)]
        public Quality3 Quality { get; set; }
        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name="resolution", EmitDefaultValue=false)]
        public Resolution2 Resolution { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MV32 {\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as MV32);
        }

        /// <summary>
        /// Returns true if MV32 instances are equal
        /// </summary>
        /// <param name="other">Instance of MV32 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MV32 other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Quality == other.Quality ||
						  (Quality != null &&
						  Quality.Equals(other.Quality))
					 ) &&
					 (
						  Resolution == other.Resolution ||
						  (Resolution != null &&
						  Resolution.Equals(other.Resolution))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Quality != null)
				{
					hash = (hash * 59) + Quality.GetHashCode();
				}

				if (Resolution != null)
				{
					hash = (hash * 59) + Resolution.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
