/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// WipeNetworkSmDevice
	/// </summary>
	[DataContract]
    public partial class WipeNetworkSmDevice :  IEquatable<WipeNetworkSmDevice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WipeNetworkSmDevice" /> class.
        /// </summary>
        /// <param name="WifiMac">The wifiMac of the device to be wiped..</param>
        /// <param name="Id">The id of the device to be wiped..</param>
        /// <param name="Serial">The serial of the device to be wiped..</param>
        /// <param name="Pin">The pin number (a six digit value) for wiping a macOS device. Required only for macOS devices..</param>
        public WipeNetworkSmDevice(string WifiMac = default, string Id = default, string Serial = default, int? Pin = default)
        {
            this.WifiMac = WifiMac;
            this.Id = Id;
            this.Serial = Serial;
            this.Pin = Pin;
        }

        /// <summary>
        /// The wifiMac of the device to be wiped.
        /// </summary>
        /// <value>The wifiMac of the device to be wiped.</value>
        [DataMember(Name="wifiMac", EmitDefaultValue=false)]
        public string WifiMac { get; set; }
        /// <summary>
        /// The id of the device to be wiped.
        /// </summary>
        /// <value>The id of the device to be wiped.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The serial of the device to be wiped.
        /// </summary>
        /// <value>The serial of the device to be wiped.</value>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }
        /// <summary>
        /// The pin number (a six digit value) for wiping a macOS device. Required only for macOS devices.
        /// </summary>
        /// <value>The pin number (a six digit value) for wiping a macOS device. Required only for macOS devices.</value>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public int? Pin { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WipeNetworkSmDevice {\n");
            sb.Append("  WifiMac: ").Append(WifiMac).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as WipeNetworkSmDevice);
        }

        /// <summary>
        /// Returns true if WipeNetworkSmDevice instances are equal
        /// </summary>
        /// <param name="other">Instance of WipeNetworkSmDevice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WipeNetworkSmDevice other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  WifiMac == other.WifiMac ||
						  WifiMac != null &&
						  WifiMac.Equals(other.WifiMac)
					 ) &&
					 (
						  Id == other.Id ||
						  Id != null &&
						  Id.Equals(other.Id)
					 ) &&
					 (
						  Serial == other.Serial ||
						  Serial != null &&
						  Serial.Equals(other.Serial)
					 ) &&
					 (
						  Pin == other.Pin ||
						  Pin != null &&
						  Pin.Equals(other.Pin)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (WifiMac != null)
                    hash = hash * 59 + WifiMac.GetHashCode();
                if (Id != null)
                    hash = hash * 59 + Id.GetHashCode();
                if (Serial != null)
                    hash = hash * 59 + Serial.GetHashCode();
                if (Pin != null)
                    hash = hash * 59 + Pin.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
