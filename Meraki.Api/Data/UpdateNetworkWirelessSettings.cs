/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkWirelessSettings
	/// </summary>
	[DataContract]
    public partial class WirelessSettingsUpdateDto :  IEquatable<WirelessSettingsUpdateDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WirelessSettingsUpdateDto" /> class.
        /// </summary>
        /// <param name="MeshingEnabled">Toggle for enabling or disabling meshing in a network.</param>
        /// <param name="Ipv6BridgeEnabled">Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode).</param>
        /// <param name="LocationAnalyticsEnabled">Toggle for enabling or disabling location analytics for your network.</param>
        /// <param name="LedLightsOn">Toggle for enabling or disabling LED lights on all APs in the network (making them run dark).</param>
        public WirelessSettingsUpdateDto(bool? MeshingEnabled = default, bool? Ipv6BridgeEnabled = default, bool? LocationAnalyticsEnabled = default, bool? LedLightsOn = default)
        {
            this.MeshingEnabled = MeshingEnabled;
            this.Ipv6BridgeEnabled = Ipv6BridgeEnabled;
            this.LocationAnalyticsEnabled = LocationAnalyticsEnabled;
            this.LedLightsOn = LedLightsOn;
        }

        /// <summary>
        /// Toggle for enabling or disabling meshing in a network
        /// </summary>
        /// <value>Toggle for enabling or disabling meshing in a network</value>
        [DataMember(Name="meshingEnabled", EmitDefaultValue=false)]
        public bool? MeshingEnabled { get; set; }
        /// <summary>
        /// Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
        /// </summary>
        /// <value>Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)</value>
        [DataMember(Name="ipv6BridgeEnabled", EmitDefaultValue=false)]
        public bool? Ipv6BridgeEnabled { get; set; }
        /// <summary>
        /// Toggle for enabling or disabling location analytics for your network
        /// </summary>
        /// <value>Toggle for enabling or disabling location analytics for your network</value>
        [DataMember(Name="locationAnalyticsEnabled", EmitDefaultValue=false)]
        public bool? LocationAnalyticsEnabled { get; set; }
        /// <summary>
        /// Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
        /// </summary>
        /// <value>Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)</value>
        [DataMember(Name="ledLightsOn", EmitDefaultValue=false)]
        public bool? LedLightsOn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkWirelessSettings {\n");
            sb.Append("  MeshingEnabled: ").Append(MeshingEnabled).Append("\n");
            sb.Append("  Ipv6BridgeEnabled: ").Append(Ipv6BridgeEnabled).Append("\n");
            sb.Append("  LocationAnalyticsEnabled: ").Append(LocationAnalyticsEnabled).Append("\n");
            sb.Append("  LedLightsOn: ").Append(LedLightsOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as WirelessSettingsUpdateDto);
        }

        /// <summary>
        /// Returns true if UpdateNetworkWirelessSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkWirelessSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WirelessSettingsUpdateDto other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  MeshingEnabled == other.MeshingEnabled ||
						  MeshingEnabled != null &&
						  MeshingEnabled.Equals(other.MeshingEnabled)
					 ) &&
					 (
						  Ipv6BridgeEnabled == other.Ipv6BridgeEnabled ||
						  Ipv6BridgeEnabled != null &&
						  Ipv6BridgeEnabled.Equals(other.Ipv6BridgeEnabled)
					 ) &&
					 (
						  LocationAnalyticsEnabled == other.LocationAnalyticsEnabled ||
						  LocationAnalyticsEnabled != null &&
						  LocationAnalyticsEnabled.Equals(other.LocationAnalyticsEnabled)
					 ) &&
					 (
						  LedLightsOn == other.LedLightsOn ||
						  LedLightsOn != null &&
						  LedLightsOn.Equals(other.LedLightsOn)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (MeshingEnabled != null)
                    hash = hash * 59 + MeshingEnabled.GetHashCode();
                if (Ipv6BridgeEnabled != null)
                    hash = hash * 59 + Ipv6BridgeEnabled.GetHashCode();
                if (LocationAnalyticsEnabled != null)
                    hash = hash * 59 + LocationAnalyticsEnabled.GetHashCode();
                if (LedLightsOn != null)
                    hash = hash * 59 + LedLightsOn.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
