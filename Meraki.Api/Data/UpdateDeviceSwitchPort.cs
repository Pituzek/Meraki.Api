/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateDeviceSwitchPort
	/// </summary>
	[DataContract]
    public partial class UpdateDeviceSwitchPort :  IEquatable<UpdateDeviceSwitchPort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDeviceSwitchPort" /> class.
        /// </summary>
        /// <param name="Name">The name of the switch port.</param>
        /// <param name="Tags">The tags of the switch port.</param>
        /// <param name="Enabled">The status of the switch port.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Vlan">The VLAN of the switch port. A null value will clear the value set for trunk ports..</param>
        /// <param name="VoiceVlan">The voice VLAN of the switch port. Only applicable to access ports..</param>
        /// <param name="AllowedVlans">The VLANs allowed on the switch port. Only applicable to trunk ports..</param>
        /// <param name="PoeEnabled">The PoE status of the switch port.</param>
        /// <param name="IsolationEnabled">The isolation status of the switch port.</param>
        /// <param name="RstpEnabled">The rapid spanning tree protocol status.</param>
        /// <param name="StpGuard">StpGuard.</param>
        /// <param name="AccessPolicyNumber">The number of the access policy of the switch port. Only applicable to access ports..</param>
        /// <param name="LinkNegotiation">The link speed for the switch port.</param>
        /// <param name="PortScheduleId">The ID of the port schedule. A value of null will clear the port schedule..</param>
        /// <param name="Udld">Udld.</param>
        /// <param name="MacWhitelist">Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. To disable MAC whitelist, set accessPolicyNumber to null..</param>
        /// <param name="StickyMacWhitelist">The initial list of MAC addresses for sticky Mac whitelist. To reset Sticky MAC whitelist, set accessPolicyNumber to null..</param>
        /// <param name="StickyMacWhitelistLimit">The maximum number of MAC addresses for sticky MAC whitelist..</param>
        /// <param name="StormControlEnabled">The storm control status of the switch port.</param>
        public UpdateDeviceSwitchPort(string Name = default, string Tags = default, bool? Enabled = default, Type Type = default, int? Vlan = default, int? VoiceVlan = default, string AllowedVlans = default, bool? PoeEnabled = default, bool? IsolationEnabled = default, bool? RstpEnabled = default, StpGuard StpGuard = default, int? AccessPolicyNumber = default, string LinkNegotiation = default, string PortScheduleId = default, Udld Udld = default, List<string> MacWhitelist = default, List<string> StickyMacWhitelist = default, int? StickyMacWhitelistLimit = default, bool? StormControlEnabled = default)
        {
            this.Name = Name;
            this.Tags = Tags;
            this.Enabled = Enabled;
            this.Type = Type;
            this.Vlan = Vlan;
            this.VoiceVlan = VoiceVlan;
            this.AllowedVlans = AllowedVlans;
            this.PoeEnabled = PoeEnabled;
            this.IsolationEnabled = IsolationEnabled;
            this.RstpEnabled = RstpEnabled;
            this.StpGuard = StpGuard;
            this.AccessPolicyNumber = AccessPolicyNumber;
            this.LinkNegotiation = LinkNegotiation;
            this.PortScheduleId = PortScheduleId;
            this.Udld = Udld;
            this.MacWhitelist = MacWhitelist;
            this.StickyMacWhitelist = StickyMacWhitelist;
            this.StickyMacWhitelistLimit = StickyMacWhitelistLimit;
            this.StormControlEnabled = StormControlEnabled;
        }

        /// <summary>
        /// The name of the switch port
        /// </summary>
        /// <value>The name of the switch port</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The tags of the switch port
        /// </summary>
        /// <value>The tags of the switch port</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }
        /// <summary>
        /// The status of the switch port
        /// </summary>
        /// <value>The status of the switch port</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public Type Type { get; set; }
        /// <summary>
        /// The VLAN of the switch port. A null value will clear the value set for trunk ports.
        /// </summary>
        /// <value>The VLAN of the switch port. A null value will clear the value set for trunk ports.</value>
        [DataMember(Name="vlan", EmitDefaultValue=false)]
        public int? Vlan { get; set; }
        /// <summary>
        /// The voice VLAN of the switch port. Only applicable to access ports.
        /// </summary>
        /// <value>The voice VLAN of the switch port. Only applicable to access ports.</value>
        [DataMember(Name="voiceVlan", EmitDefaultValue=false)]
        public int? VoiceVlan { get; set; }
        /// <summary>
        /// The VLANs allowed on the switch port. Only applicable to trunk ports.
        /// </summary>
        /// <value>The VLANs allowed on the switch port. Only applicable to trunk ports.</value>
        [DataMember(Name="allowedVlans", EmitDefaultValue=false)]
        public string AllowedVlans { get; set; }
        /// <summary>
        /// The PoE status of the switch port
        /// </summary>
        /// <value>The PoE status of the switch port</value>
        [DataMember(Name="poeEnabled", EmitDefaultValue=false)]
        public bool? PoeEnabled { get; set; }
        /// <summary>
        /// The isolation status of the switch port
        /// </summary>
        /// <value>The isolation status of the switch port</value>
        [DataMember(Name="isolationEnabled", EmitDefaultValue=false)]
        public bool? IsolationEnabled { get; set; }
        /// <summary>
        /// The rapid spanning tree protocol status
        /// </summary>
        /// <value>The rapid spanning tree protocol status</value>
        [DataMember(Name="rstpEnabled", EmitDefaultValue=false)]
        public bool? RstpEnabled { get; set; }
        /// <summary>
        /// Gets or Sets StpGuard
        /// </summary>
        [DataMember(Name="stpGuard", EmitDefaultValue=false)]
        public StpGuard StpGuard { get; set; }
        /// <summary>
        /// The number of the access policy of the switch port. Only applicable to access ports.
        /// </summary>
        /// <value>The number of the access policy of the switch port. Only applicable to access ports.</value>
        [DataMember(Name="accessPolicyNumber", EmitDefaultValue=false)]
        public int? AccessPolicyNumber { get; set; }
        /// <summary>
        /// The link speed for the switch port
        /// </summary>
        /// <value>The link speed for the switch port</value>
        [DataMember(Name="linkNegotiation", EmitDefaultValue=false)]
        public string LinkNegotiation { get; set; }
        /// <summary>
        /// The ID of the port schedule. A value of null will clear the port schedule.
        /// </summary>
        /// <value>The ID of the port schedule. A value of null will clear the port schedule.</value>
        [DataMember(Name="portScheduleId", EmitDefaultValue=false)]
        public string PortScheduleId { get; set; }
        /// <summary>
        /// Gets or Sets Udld
        /// </summary>
        [DataMember(Name="udld", EmitDefaultValue=false)]
        public Udld Udld { get; set; }
        /// <summary>
        /// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. To disable MAC whitelist, set accessPolicyNumber to null.
        /// </summary>
        /// <value>Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. To disable MAC whitelist, set accessPolicyNumber to null.</value>
        [DataMember(Name="macWhitelist", EmitDefaultValue=false)]
        public List<string> MacWhitelist { get; set; }
        /// <summary>
        /// The initial list of MAC addresses for sticky Mac whitelist. To reset Sticky MAC whitelist, set accessPolicyNumber to null.
        /// </summary>
        /// <value>The initial list of MAC addresses for sticky Mac whitelist. To reset Sticky MAC whitelist, set accessPolicyNumber to null.</value>
        [DataMember(Name="stickyMacWhitelist", EmitDefaultValue=false)]
        public List<string> StickyMacWhitelist { get; set; }
        /// <summary>
        /// The maximum number of MAC addresses for sticky MAC whitelist.
        /// </summary>
        /// <value>The maximum number of MAC addresses for sticky MAC whitelist.</value>
        [DataMember(Name="stickyMacWhitelistLimit", EmitDefaultValue=false)]
        public int? StickyMacWhitelistLimit { get; set; }
        /// <summary>
        /// The storm control status of the switch port
        /// </summary>
        /// <value>The storm control status of the switch port</value>
        [DataMember(Name="stormControlEnabled", EmitDefaultValue=false)]
        public bool? StormControlEnabled { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateDeviceSwitchPort {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Vlan: ").Append(Vlan).Append("\n");
            sb.Append("  VoiceVlan: ").Append(VoiceVlan).Append("\n");
            sb.Append("  AllowedVlans: ").Append(AllowedVlans).Append("\n");
            sb.Append("  PoeEnabled: ").Append(PoeEnabled).Append("\n");
            sb.Append("  IsolationEnabled: ").Append(IsolationEnabled).Append("\n");
            sb.Append("  RstpEnabled: ").Append(RstpEnabled).Append("\n");
            sb.Append("  StpGuard: ").Append(StpGuard).Append("\n");
            sb.Append("  AccessPolicyNumber: ").Append(AccessPolicyNumber).Append("\n");
            sb.Append("  LinkNegotiation: ").Append(LinkNegotiation).Append("\n");
            sb.Append("  PortScheduleId: ").Append(PortScheduleId).Append("\n");
            sb.Append("  Udld: ").Append(Udld).Append("\n");
            sb.Append("  MacWhitelist: ").Append(MacWhitelist).Append("\n");
            sb.Append("  StickyMacWhitelist: ").Append(StickyMacWhitelist).Append("\n");
            sb.Append("  StickyMacWhitelistLimit: ").Append(StickyMacWhitelistLimit).Append("\n");
            sb.Append("  StormControlEnabled: ").Append(StormControlEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateDeviceSwitchPort);
        }

        /// <summary>
        /// Returns true if UpdateDeviceSwitchPort instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateDeviceSwitchPort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateDeviceSwitchPort other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  Name != null &&
						  Name.Equals(other.Name)
					 ) &&
					 (
						  Tags == other.Tags ||
						  Tags != null &&
						  Tags.Equals(other.Tags)
					 ) &&
					 (
						  Enabled == other.Enabled ||
						  Enabled != null &&
						  Enabled.Equals(other.Enabled)
					 ) &&
					 (
						  Type == other.Type ||
						  Type != null &&
						  Type.Equals(other.Type)
					 ) &&
					 (
						  Vlan == other.Vlan ||
						  Vlan != null &&
						  Vlan.Equals(other.Vlan)
					 ) &&
					 (
						  VoiceVlan == other.VoiceVlan ||
						  VoiceVlan != null &&
						  VoiceVlan.Equals(other.VoiceVlan)
					 ) &&
					 (
						  AllowedVlans == other.AllowedVlans ||
						  AllowedVlans != null &&
						  AllowedVlans.Equals(other.AllowedVlans)
					 ) &&
					 (
						  PoeEnabled == other.PoeEnabled ||
						  PoeEnabled != null &&
						  PoeEnabled.Equals(other.PoeEnabled)
					 ) &&
					 (
						  IsolationEnabled == other.IsolationEnabled ||
						  IsolationEnabled != null &&
						  IsolationEnabled.Equals(other.IsolationEnabled)
					 ) &&
					 (
						  RstpEnabled == other.RstpEnabled ||
						  RstpEnabled != null &&
						  RstpEnabled.Equals(other.RstpEnabled)
					 ) &&
					 (
						  StpGuard == other.StpGuard ||
						  StpGuard != null &&
						  StpGuard.Equals(other.StpGuard)
					 ) &&
					 (
						  AccessPolicyNumber == other.AccessPolicyNumber ||
						  AccessPolicyNumber != null &&
						  AccessPolicyNumber.Equals(other.AccessPolicyNumber)
					 ) &&
					 (
						  LinkNegotiation == other.LinkNegotiation ||
						  LinkNegotiation != null &&
						  LinkNegotiation.Equals(other.LinkNegotiation)
					 ) &&
					 (
						  PortScheduleId == other.PortScheduleId ||
						  PortScheduleId != null &&
						  PortScheduleId.Equals(other.PortScheduleId)
					 ) &&
					 (
						  Udld == other.Udld ||
						  Udld != null &&
						  Udld.Equals(other.Udld)
					 ) &&
					 (
						  MacWhitelist == other.MacWhitelist ||
						  MacWhitelist != null &&
						  MacWhitelist.SequenceEqual(other.MacWhitelist)
					 ) &&
					 (
						  StickyMacWhitelist == other.StickyMacWhitelist ||
						  StickyMacWhitelist != null &&
						  StickyMacWhitelist.SequenceEqual(other.StickyMacWhitelist)
					 ) &&
					 (
						  StickyMacWhitelistLimit == other.StickyMacWhitelistLimit ||
						  StickyMacWhitelistLimit != null &&
						  StickyMacWhitelistLimit.Equals(other.StickyMacWhitelistLimit)
					 ) &&
					 (
						  StormControlEnabled == other.StormControlEnabled ||
						  StormControlEnabled != null &&
						  StormControlEnabled.Equals(other.StormControlEnabled)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hash = hash * 59 + Name.GetHashCode();
                if (Tags != null)
                    hash = hash * 59 + Tags.GetHashCode();
                if (Enabled != null)
                    hash = hash * 59 + Enabled.GetHashCode();
                if (Type != null)
                    hash = hash * 59 + Type.GetHashCode();
                if (Vlan != null)
                    hash = hash * 59 + Vlan.GetHashCode();
                if (VoiceVlan != null)
                    hash = hash * 59 + VoiceVlan.GetHashCode();
                if (AllowedVlans != null)
                    hash = hash * 59 + AllowedVlans.GetHashCode();
                if (PoeEnabled != null)
                    hash = hash * 59 + PoeEnabled.GetHashCode();
                if (IsolationEnabled != null)
                    hash = hash * 59 + IsolationEnabled.GetHashCode();
                if (RstpEnabled != null)
                    hash = hash * 59 + RstpEnabled.GetHashCode();
                if (StpGuard != null)
                    hash = hash * 59 + StpGuard.GetHashCode();
                if (AccessPolicyNumber != null)
                    hash = hash * 59 + AccessPolicyNumber.GetHashCode();
                if (LinkNegotiation != null)
                    hash = hash * 59 + LinkNegotiation.GetHashCode();
                if (PortScheduleId != null)
                    hash = hash * 59 + PortScheduleId.GetHashCode();
                if (Udld != null)
                    hash = hash * 59 + Udld.GetHashCode();
                if (MacWhitelist != null)
                    hash = hash * 59 + MacWhitelist.GetHashCode();
                if (StickyMacWhitelist != null)
                    hash = hash * 59 + StickyMacWhitelist.GetHashCode();
                if (StickyMacWhitelistLimit != null)
                    hash = hash * 59 + StickyMacWhitelistLimit.GetHashCode();
                if (StormControlEnabled != null)
                    hash = hash * 59 + StormControlEnabled.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
