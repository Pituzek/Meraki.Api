/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkSecurityMalwareSettings
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkSecurityMalwareSettings :  IEquatable<UpdateNetworkSecurityMalwareSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkSecurityMalwareSettings" /> class.
        /// </summary>
        [JsonConstructor]
        protected UpdateNetworkSecurityMalwareSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkSecurityMalwareSettings" /> class.
        /// </summary>
        /// <param name="Mode">Mode (required).</param>
        /// <param name="AllowedUrls">The urls that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP whitelisting.</param>
        /// <param name="AllowedFiles">The sha256 digests of files that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP whitelisting.</param>
        public UpdateNetworkSecurityMalwareSettings(Mode1 Mode = default, List<AllowedUrl> AllowedUrls = default, List<AllowedFile> AllowedFiles = default)
        {
            // to ensure "Mode" is required (not null)
            if (Mode == null)
            {
                throw new InvalidDataException("Mode is a required property for UpdateNetworkSecurityMalwareSettings and cannot be null");
            }
            else
            {
                this.Mode = Mode;
            }
            this.AllowedUrls = AllowedUrls;
            this.AllowedFiles = AllowedFiles;
        }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public Mode1 Mode { get; set; }
        /// <summary>
        /// The urls that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP whitelisting
        /// </summary>
        /// <value>The urls that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP whitelisting</value>
        [DataMember(Name="allowedUrls", EmitDefaultValue=false)]
        public List<AllowedUrl> AllowedUrls { get; set; }
        /// <summary>
        /// The sha256 digests of files that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP whitelisting
        /// </summary>
        /// <value>The sha256 digests of files that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP whitelisting</value>
        [DataMember(Name="allowedFiles", EmitDefaultValue=false)]
        public List<AllowedFile> AllowedFiles { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkSecurityMalwareSettings {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  AllowedUrls: ").Append(AllowedUrls).Append("\n");
            sb.Append("  AllowedFiles: ").Append(AllowedFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkSecurityMalwareSettings);
        }

        /// <summary>
        /// Returns true if UpdateNetworkSecurityMalwareSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkSecurityMalwareSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkSecurityMalwareSettings other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Mode == other.Mode ||
						  (Mode != null &&
						  Mode.Equals(other.Mode))
					 ) &&
					 (
						  AllowedUrls == other.AllowedUrls ||
						  (AllowedUrls != null &&
						  AllowedUrls.SequenceEqual(other.AllowedUrls))
					 ) &&
					 (
						  AllowedFiles == other.AllowedFiles ||
						  (AllowedFiles != null &&
						  AllowedFiles.SequenceEqual(other.AllowedFiles))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Mode != null)
				{
					hash = (hash * 59) + Mode.GetHashCode();
				}

				if (AllowedUrls != null)
				{
					hash = (hash * 59) + AllowedUrls.GetHashCode();
				}

				if (AllowedFiles != null)
				{
					hash = (hash * 59) + AllowedFiles.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
