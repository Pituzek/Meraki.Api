/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// CreateNetworkVlan
	/// </summary>
	[DataContract]
    public partial class CreateNetworkVlan :  IEquatable<CreateNetworkVlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNetworkVlan" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateNetworkVlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNetworkVlan" /> class.
        /// </summary>
        /// <param name="Id">The VLAN ID of the new VLAN (must be between 1 and 4094) (required).</param>
        /// <param name="Name">The name of the new VLAN (required).</param>
        /// <param name="Subnet">The subnet of the VLAN (required).</param>
        /// <param name="ApplianceIp">The local IP of the appliance on the VLAN (required).</param>
        /// <param name="GroupPolicyId">The id of the desired group policy to apply to the VLAN.</param>
        public CreateNetworkVlan(string Id = default, string Name = default, string Subnet = default, string ApplianceIp = default, string GroupPolicyId = default)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for CreateNetworkVlan and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateNetworkVlan and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Subnet" is required (not null)
            if (Subnet == null)
            {
                throw new InvalidDataException("Subnet is a required property for CreateNetworkVlan and cannot be null");
            }
            else
            {
                this.Subnet = Subnet;
            }
            // to ensure "ApplianceIp" is required (not null)
            if (ApplianceIp == null)
            {
                throw new InvalidDataException("ApplianceIp is a required property for CreateNetworkVlan and cannot be null");
            }
            else
            {
                this.ApplianceIp = ApplianceIp;
            }
            this.GroupPolicyId = GroupPolicyId;
        }

        /// <summary>
        /// The VLAN ID of the new VLAN (must be between 1 and 4094)
        /// </summary>
        /// <value>The VLAN ID of the new VLAN (must be between 1 and 4094)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The name of the new VLAN
        /// </summary>
        /// <value>The name of the new VLAN</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The subnet of the VLAN
        /// </summary>
        /// <value>The subnet of the VLAN</value>
        [DataMember(Name="subnet", EmitDefaultValue=false)]
        public string Subnet { get; set; }
        /// <summary>
        /// The local IP of the appliance on the VLAN
        /// </summary>
        /// <value>The local IP of the appliance on the VLAN</value>
        [DataMember(Name="applianceIp", EmitDefaultValue=false)]
        public string ApplianceIp { get; set; }
        /// <summary>
        /// The id of the desired group policy to apply to the VLAN
        /// </summary>
        /// <value>The id of the desired group policy to apply to the VLAN</value>
        [DataMember(Name="groupPolicyId", EmitDefaultValue=false)]
        public string GroupPolicyId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateNetworkVlan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subnet: ").Append(Subnet).Append("\n");
            sb.Append("  ApplianceIp: ").Append(ApplianceIp).Append("\n");
            sb.Append("  GroupPolicyId: ").Append(GroupPolicyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as CreateNetworkVlan);
        }

        /// <summary>
        /// Returns true if CreateNetworkVlan instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateNetworkVlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateNetworkVlan other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Id == other.Id ||
						  Id != null &&
						  Id.Equals(other.Id)
					 ) &&
					 (
						  Name == other.Name ||
						  Name != null &&
						  Name.Equals(other.Name)
					 ) &&
					 (
						  Subnet == other.Subnet ||
						  Subnet != null &&
						  Subnet.Equals(other.Subnet)
					 ) &&
					 (
						  ApplianceIp == other.ApplianceIp ||
						  ApplianceIp != null &&
						  ApplianceIp.Equals(other.ApplianceIp)
					 ) &&
					 (
						  GroupPolicyId == other.GroupPolicyId ||
						  GroupPolicyId != null &&
						  GroupPolicyId.Equals(other.GroupPolicyId)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hash = hash * 59 + Id.GetHashCode();
                if (Name != null)
                    hash = hash * 59 + Name.GetHashCode();
                if (Subnet != null)
                    hash = hash * 59 + Subnet.GetHashCode();
                if (ApplianceIp != null)
                    hash = hash * 59 + ApplianceIp.GetHashCode();
                if (GroupPolicyId != null)
                    hash = hash * 59 + GroupPolicyId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
