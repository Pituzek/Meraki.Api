/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkWarmSpareSettings
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkWarmSpareSettings :  IEquatable<UpdateNetworkWarmSpareSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkWarmSpareSettings" /> class.
        /// </summary>
        [JsonConstructor]
        protected UpdateNetworkWarmSpareSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkWarmSpareSettings" /> class.
        /// </summary>
        /// <param name="Enabled">Enable warm spare (required).</param>
        /// <param name="SpareSerial">Serial number of the warm spare appliance.</param>
        /// <param name="UplinkMode">Uplink mode, either virtual or public.</param>
        /// <param name="VirtualIp1">The WAN 1 shared IP.</param>
        /// <param name="VirtualIp2">The WAN 2 shared IP.</param>
        public UpdateNetworkWarmSpareSettings(bool? Enabled = default, string SpareSerial = default, string UplinkMode = default, string VirtualIp1 = default, string VirtualIp2 = default)
        {
            // to ensure "Enabled" is required (not null)
            if (Enabled == null)
            {
                throw new InvalidDataException("Enabled is a required property for UpdateNetworkWarmSpareSettings and cannot be null");
            }
            else
            {
                this.Enabled = Enabled;
            }
            this.SpareSerial = SpareSerial;
            this.UplinkMode = UplinkMode;
            this.VirtualIp1 = VirtualIp1;
            this.VirtualIp2 = VirtualIp2;
        }

        /// <summary>
        /// Enable warm spare
        /// </summary>
        /// <value>Enable warm spare</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Serial number of the warm spare appliance
        /// </summary>
        /// <value>Serial number of the warm spare appliance</value>
        [DataMember(Name="spareSerial", EmitDefaultValue=false)]
        public string SpareSerial { get; set; }
        /// <summary>
        /// Uplink mode, either virtual or public
        /// </summary>
        /// <value>Uplink mode, either virtual or public</value>
        [DataMember(Name="uplinkMode", EmitDefaultValue=false)]
        public string UplinkMode { get; set; }
        /// <summary>
        /// The WAN 1 shared IP
        /// </summary>
        /// <value>The WAN 1 shared IP</value>
        [DataMember(Name="virtualIp1", EmitDefaultValue=false)]
        public string VirtualIp1 { get; set; }
        /// <summary>
        /// The WAN 2 shared IP
        /// </summary>
        /// <value>The WAN 2 shared IP</value>
        [DataMember(Name="virtualIp2", EmitDefaultValue=false)]
        public string VirtualIp2 { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkWarmSpareSettings {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  SpareSerial: ").Append(SpareSerial).Append("\n");
            sb.Append("  UplinkMode: ").Append(UplinkMode).Append("\n");
            sb.Append("  VirtualIp1: ").Append(VirtualIp1).Append("\n");
            sb.Append("  VirtualIp2: ").Append(VirtualIp2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkWarmSpareSettings);
        }

        /// <summary>
        /// Returns true if UpdateNetworkWarmSpareSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkWarmSpareSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkWarmSpareSettings other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Enabled == other.Enabled ||
						  (Enabled != null &&
						  Enabled.Equals(other.Enabled))
					 ) &&
					 (
						  SpareSerial == other.SpareSerial ||
						  (SpareSerial != null &&
						  SpareSerial.Equals(other.SpareSerial))
					 ) &&
					 (
						  UplinkMode == other.UplinkMode ||
						  (UplinkMode != null &&
						  UplinkMode.Equals(other.UplinkMode))
					 ) &&
					 (
						  VirtualIp1 == other.VirtualIp1 ||
						  (VirtualIp1 != null &&
						  VirtualIp1.Equals(other.VirtualIp1))
					 ) &&
					 (
						  VirtualIp2 == other.VirtualIp2 ||
						  (VirtualIp2 != null &&
						  VirtualIp2.Equals(other.VirtualIp2))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Enabled != null)
				{
					hash = (hash * 59) + Enabled.GetHashCode();
				}

				if (SpareSerial != null)
				{
					hash = (hash * 59) + SpareSerial.GetHashCode();
				}

				if (UplinkMode != null)
				{
					hash = (hash * 59) + UplinkMode.GetHashCode();
				}

				if (VirtualIp1 != null)
				{
					hash = (hash * 59) + VirtualIp1.GetHashCode();
				}

				if (VirtualIp2 != null)
				{
					hash = (hash * 59) + VirtualIp2.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
