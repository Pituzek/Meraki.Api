/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Override1
	/// </summary>
	[DataContract]
    public partial class Override1 :  IEquatable<Override1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Override1" /> class.
        /// </summary>
        [JsonConstructor]
        protected Override1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Override1" /> class.
        /// </summary>
        /// <param name="SwitchProfiles">List of switch profiles ids for template network.</param>
        /// <param name="Switches">List of switch serials for non-template network.</param>
        /// <param name="Stacks">List of switch stack ids for non-template network.</param>
        /// <param name="IgmpSnoopingEnabled">IGMP snooping setting for switches, switch stacks or switch profiles (required).</param>
        /// <param name="FloodUnknownMulticastTrafficEnabled">Flood unknown multicast traffic setting for switches, switch stacks or switch profiles (required).</param>
        public Override1(List<string> SwitchProfiles = default, List<string> Switches = default, List<string> Stacks = default, bool? IgmpSnoopingEnabled = default, bool? FloodUnknownMulticastTrafficEnabled = default)
        {
            // to ensure "IgmpSnoopingEnabled" is required (not null)
            if (IgmpSnoopingEnabled == null)
            {
                throw new InvalidDataException("IgmpSnoopingEnabled is a required property for Override1 and cannot be null");
            }
            else
            {
                this.IgmpSnoopingEnabled = IgmpSnoopingEnabled;
            }
            // to ensure "FloodUnknownMulticastTrafficEnabled" is required (not null)
            if (FloodUnknownMulticastTrafficEnabled == null)
            {
                throw new InvalidDataException("FloodUnknownMulticastTrafficEnabled is a required property for Override1 and cannot be null");
            }
            else
            {
                this.FloodUnknownMulticastTrafficEnabled = FloodUnknownMulticastTrafficEnabled;
            }
            this.SwitchProfiles = SwitchProfiles;
            this.Switches = Switches;
            this.Stacks = Stacks;
        }

        /// <summary>
        /// List of switch profiles ids for template network
        /// </summary>
        /// <value>List of switch profiles ids for template network</value>
        [DataMember(Name="switchProfiles", EmitDefaultValue=false)]
        public List<string> SwitchProfiles { get; set; }
        /// <summary>
        /// List of switch serials for non-template network
        /// </summary>
        /// <value>List of switch serials for non-template network</value>
        [DataMember(Name="switches", EmitDefaultValue=false)]
        public List<string> Switches { get; set; }
        /// <summary>
        /// List of switch stack ids for non-template network
        /// </summary>
        /// <value>List of switch stack ids for non-template network</value>
        [DataMember(Name="stacks", EmitDefaultValue=false)]
        public List<string> Stacks { get; set; }
        /// <summary>
        /// IGMP snooping setting for switches, switch stacks or switch profiles
        /// </summary>
        /// <value>IGMP snooping setting for switches, switch stacks or switch profiles</value>
        [DataMember(Name="igmpSnoopingEnabled", EmitDefaultValue=false)]
        public bool? IgmpSnoopingEnabled { get; set; }
        /// <summary>
        /// Flood unknown multicast traffic setting for switches, switch stacks or switch profiles
        /// </summary>
        /// <value>Flood unknown multicast traffic setting for switches, switch stacks or switch profiles</value>
        [DataMember(Name="floodUnknownMulticastTrafficEnabled", EmitDefaultValue=false)]
        public bool? FloodUnknownMulticastTrafficEnabled { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Override1 {\n");
            sb.Append("  SwitchProfiles: ").Append(SwitchProfiles).Append("\n");
            sb.Append("  Switches: ").Append(Switches).Append("\n");
            sb.Append("  Stacks: ").Append(Stacks).Append("\n");
            sb.Append("  IgmpSnoopingEnabled: ").Append(IgmpSnoopingEnabled).Append("\n");
            sb.Append("  FloodUnknownMulticastTrafficEnabled: ").Append(FloodUnknownMulticastTrafficEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Override1);
        }

        /// <summary>
        /// Returns true if Override1 instances are equal
        /// </summary>
        /// <param name="other">Instance of Override1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Override1 other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  SwitchProfiles == other.SwitchProfiles ||
						  SwitchProfiles != null &&
						  SwitchProfiles.SequenceEqual(other.SwitchProfiles)
					 ) &&
					 (
						  Switches == other.Switches ||
						  Switches != null &&
						  Switches.SequenceEqual(other.Switches)
					 ) &&
					 (
						  Stacks == other.Stacks ||
						  Stacks != null &&
						  Stacks.SequenceEqual(other.Stacks)
					 ) &&
					 (
						  IgmpSnoopingEnabled == other.IgmpSnoopingEnabled ||
						  IgmpSnoopingEnabled != null &&
						  IgmpSnoopingEnabled.Equals(other.IgmpSnoopingEnabled)
					 ) &&
					 (
						  FloodUnknownMulticastTrafficEnabled == other.FloodUnknownMulticastTrafficEnabled ||
						  FloodUnknownMulticastTrafficEnabled != null &&
						  FloodUnknownMulticastTrafficEnabled.Equals(other.FloodUnknownMulticastTrafficEnabled)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (SwitchProfiles != null)
                    hash = hash * 59 + SwitchProfiles.GetHashCode();
                if (Switches != null)
                    hash = hash * 59 + Switches.GetHashCode();
                if (Stacks != null)
                    hash = hash * 59 + Stacks.GetHashCode();
                if (IgmpSnoopingEnabled != null)
                    hash = hash * 59 + IgmpSnoopingEnabled.GetHashCode();
                if (FloodUnknownMulticastTrafficEnabled != null)
                    hash = hash * 59 + FloodUnknownMulticastTrafficEnabled.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
