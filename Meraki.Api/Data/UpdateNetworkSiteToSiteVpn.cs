/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkSiteToSiteVpn
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkSiteToSiteVpn :  IEquatable<UpdateNetworkSiteToSiteVpn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkSiteToSiteVpn" /> class.
        /// </summary>
        [JsonConstructor]
        protected UpdateNetworkSiteToSiteVpn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkSiteToSiteVpn" /> class.
        /// </summary>
        /// <param name="Mode">Mode (required).</param>
        /// <param name="Hubs">The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required..</param>
        /// <param name="Subnets">The list of subnets and their VPN presence..</param>
        public UpdateNetworkSiteToSiteVpn(Mode2 Mode = default, List<Hub> Hubs = default, List<Subnet> Subnets = default)
        {
            // to ensure "Mode" is required (not null)
            if (Mode == null)
            {
                throw new InvalidDataException("Mode is a required property for UpdateNetworkSiteToSiteVpn and cannot be null");
            }
            else
            {
                this.Mode = Mode;
            }
            this.Hubs = Hubs;
            this.Subnets = Subnets;
        }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public Mode2 Mode { get; set; }
        /// <summary>
        /// The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required.
        /// </summary>
        /// <value>The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required.</value>
        [DataMember(Name="hubs", EmitDefaultValue=false)]
        public List<Hub> Hubs { get; set; }
        /// <summary>
        /// The list of subnets and their VPN presence.
        /// </summary>
        /// <value>The list of subnets and their VPN presence.</value>
        [DataMember(Name="subnets", EmitDefaultValue=false)]
        public List<Subnet> Subnets { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkSiteToSiteVpn {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Hubs: ").Append(Hubs).Append("\n");
            sb.Append("  Subnets: ").Append(Subnets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkSiteToSiteVpn);
        }

        /// <summary>
        /// Returns true if UpdateNetworkSiteToSiteVpn instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkSiteToSiteVpn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkSiteToSiteVpn other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Mode == other.Mode ||
						  (Mode != null &&
						  Mode.Equals(other.Mode))
					 ) &&
					 (
						  Hubs == other.Hubs ||
						  (Hubs != null &&
						  Hubs.SequenceEqual(other.Hubs))
					 ) &&
					 (
						  Subnets == other.Subnets ||
						  (Subnets != null &&
						  Subnets.SequenceEqual(other.Subnets))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Mode != null)
				{
					hash = (hash * 59) + Mode.GetHashCode();
				}

				if (Hubs != null)
				{
					hash = (hash * 59) + Hubs.GetHashCode();
				}

				if (Subnets != null)
				{
					hash = (hash * 59) + Subnets.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
