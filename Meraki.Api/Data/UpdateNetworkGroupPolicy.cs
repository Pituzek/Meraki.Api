/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkGroupPolicy
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkGroupPolicy :  IEquatable<UpdateNetworkGroupPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkGroupPolicy" /> class.
        /// </summary>
        /// <param name="Name">The name for your group policy..</param>
        /// <param name="Scheduling">Scheduling.</param>
        /// <param name="Bandwidth">Bandwidth.</param>
        /// <param name="FirewallAndTrafficShaping">FirewallAndTrafficShaping.</param>
        /// <param name="ContentFiltering">ContentFiltering.</param>
        /// <param name="SplashAuthSettings">SplashAuthSettings.</param>
        /// <param name="VlanTagging">VlanTagging.</param>
        /// <param name="BonjourForwarding">BonjourForwarding.</param>
        public UpdateNetworkGroupPolicy(string Name = default, Scheduling Scheduling = default, Bandwidth Bandwidth = default, FirewallAndTrafficShaping FirewallAndTrafficShaping = default, ContentFiltering ContentFiltering = default, SplashAuthSettings SplashAuthSettings = default, VlanTagging VlanTagging = default, BonjourForwarding BonjourForwarding = default)
        {
            this.Name = Name;
            this.Scheduling = Scheduling;
            this.Bandwidth = Bandwidth;
            this.FirewallAndTrafficShaping = FirewallAndTrafficShaping;
            this.ContentFiltering = ContentFiltering;
            this.SplashAuthSettings = SplashAuthSettings;
            this.VlanTagging = VlanTagging;
            this.BonjourForwarding = BonjourForwarding;
        }

        /// <summary>
        /// The name for your group policy.
        /// </summary>
        /// <value>The name for your group policy.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Scheduling
        /// </summary>
        [DataMember(Name="scheduling", EmitDefaultValue=false)]
        public Scheduling Scheduling { get; set; }
        /// <summary>
        /// Gets or Sets Bandwidth
        /// </summary>
        [DataMember(Name="bandwidth", EmitDefaultValue=false)]
        public Bandwidth Bandwidth { get; set; }
        /// <summary>
        /// Gets or Sets FirewallAndTrafficShaping
        /// </summary>
        [DataMember(Name="firewallAndTrafficShaping", EmitDefaultValue=false)]
        public FirewallAndTrafficShaping FirewallAndTrafficShaping { get; set; }
        /// <summary>
        /// Gets or Sets ContentFiltering
        /// </summary>
        [DataMember(Name="contentFiltering", EmitDefaultValue=false)]
        public ContentFiltering ContentFiltering { get; set; }
        /// <summary>
        /// Gets or Sets SplashAuthSettings
        /// </summary>
        [DataMember(Name="splashAuthSettings", EmitDefaultValue=false)]
        public SplashAuthSettings SplashAuthSettings { get; set; }
        /// <summary>
        /// Gets or Sets VlanTagging
        /// </summary>
        [DataMember(Name="vlanTagging", EmitDefaultValue=false)]
        public VlanTagging VlanTagging { get; set; }
        /// <summary>
        /// Gets or Sets BonjourForwarding
        /// </summary>
        [DataMember(Name="bonjourForwarding", EmitDefaultValue=false)]
        public BonjourForwarding BonjourForwarding { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkGroupPolicy {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Scheduling: ").Append(Scheduling).Append("\n");
            sb.Append("  Bandwidth: ").Append(Bandwidth).Append("\n");
            sb.Append("  FirewallAndTrafficShaping: ").Append(FirewallAndTrafficShaping).Append("\n");
            sb.Append("  ContentFiltering: ").Append(ContentFiltering).Append("\n");
            sb.Append("  SplashAuthSettings: ").Append(SplashAuthSettings).Append("\n");
            sb.Append("  VlanTagging: ").Append(VlanTagging).Append("\n");
            sb.Append("  BonjourForwarding: ").Append(BonjourForwarding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkGroupPolicy);
        }

        /// <summary>
        /// Returns true if UpdateNetworkGroupPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkGroupPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkGroupPolicy other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  Name != null &&
						  Name.Equals(other.Name)
					 ) &&
					 (
						  Scheduling == other.Scheduling ||
						  Scheduling != null &&
						  Scheduling.Equals(other.Scheduling)
					 ) &&
					 (
						  Bandwidth == other.Bandwidth ||
						  Bandwidth != null &&
						  Bandwidth.Equals(other.Bandwidth)
					 ) &&
					 (
						  FirewallAndTrafficShaping == other.FirewallAndTrafficShaping ||
						  FirewallAndTrafficShaping != null &&
						  FirewallAndTrafficShaping.Equals(other.FirewallAndTrafficShaping)
					 ) &&
					 (
						  ContentFiltering == other.ContentFiltering ||
						  ContentFiltering != null &&
						  ContentFiltering.Equals(other.ContentFiltering)
					 ) &&
					 (
						  SplashAuthSettings == other.SplashAuthSettings ||
						  SplashAuthSettings != null &&
						  SplashAuthSettings.Equals(other.SplashAuthSettings)
					 ) &&
					 (
						  VlanTagging == other.VlanTagging ||
						  VlanTagging != null &&
						  VlanTagging.Equals(other.VlanTagging)
					 ) &&
					 (
						  BonjourForwarding == other.BonjourForwarding ||
						  BonjourForwarding != null &&
						  BonjourForwarding.Equals(other.BonjourForwarding)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hash = hash * 59 + Name.GetHashCode();
                if (Scheduling != null)
                    hash = hash * 59 + Scheduling.GetHashCode();
                if (Bandwidth != null)
                    hash = hash * 59 + Bandwidth.GetHashCode();
                if (FirewallAndTrafficShaping != null)
                    hash = hash * 59 + FirewallAndTrafficShaping.GetHashCode();
                if (ContentFiltering != null)
                    hash = hash * 59 + ContentFiltering.GetHashCode();
                if (SplashAuthSettings != null)
                    hash = hash * 59 + SplashAuthSettings.GetHashCode();
                if (VlanTagging != null)
                    hash = hash * 59 + VlanTagging.GetHashCode();
                if (BonjourForwarding != null)
                    hash = hash * 59 + BonjourForwarding.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
