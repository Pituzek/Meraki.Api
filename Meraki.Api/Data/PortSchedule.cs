/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// The schedule for switch port scheduling. Schedules are applied to days of the week.     When it&#39;s empty, default schedule with all days of a week are configured.     Any unspecified day in the schedule is added as a default schedule configuration of the day.
	/// </summary>
	[DataContract]
    public partial class PortSchedule :  IEquatable<PortSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortSchedule" /> class.
        /// </summary>
        /// <param name="Monday">Monday.</param>
        /// <param name="Tuesday">Tuesday.</param>
        /// <param name="Wednesday">Wednesday.</param>
        /// <param name="Thursday">Thursday.</param>
        /// <param name="Friday">Friday.</param>
        /// <param name="Saturday">Saturday.</param>
        /// <param name="Sunday">Sunday.</param>
        public PortSchedule(Monday Monday = default, Tuesday Tuesday = default, Wednesday Wednesday = default, Thursday Thursday = default, Friday Friday = default, Saturday Saturday = default, Sunday Sunday = default)
        {
            this.Monday = Monday;
            this.Tuesday = Tuesday;
            this.Wednesday = Wednesday;
            this.Thursday = Thursday;
            this.Friday = Friday;
            this.Saturday = Saturday;
            this.Sunday = Sunday;
        }

        /// <summary>
        /// Gets or Sets Monday
        /// </summary>
        [DataMember(Name="monday", EmitDefaultValue=false)]
        public Monday Monday { get; set; }
        /// <summary>
        /// Gets or Sets Tuesday
        /// </summary>
        [DataMember(Name="tuesday", EmitDefaultValue=false)]
        public Tuesday Tuesday { get; set; }
        /// <summary>
        /// Gets or Sets Wednesday
        /// </summary>
        [DataMember(Name="wednesday", EmitDefaultValue=false)]
        public Wednesday Wednesday { get; set; }
        /// <summary>
        /// Gets or Sets Thursday
        /// </summary>
        [DataMember(Name="thursday", EmitDefaultValue=false)]
        public Thursday Thursday { get; set; }
        /// <summary>
        /// Gets or Sets Friday
        /// </summary>
        [DataMember(Name="friday", EmitDefaultValue=false)]
        public Friday Friday { get; set; }
        /// <summary>
        /// Gets or Sets Saturday
        /// </summary>
        [DataMember(Name="saturday", EmitDefaultValue=false)]
        public Saturday Saturday { get; set; }
        /// <summary>
        /// Gets or Sets Sunday
        /// </summary>
        [DataMember(Name="sunday", EmitDefaultValue=false)]
        public Sunday Sunday { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortSchedule {\n");
            sb.Append("  Monday: ").Append(Monday).Append("\n");
            sb.Append("  Tuesday: ").Append(Tuesday).Append("\n");
            sb.Append("  Wednesday: ").Append(Wednesday).Append("\n");
            sb.Append("  Thursday: ").Append(Thursday).Append("\n");
            sb.Append("  Friday: ").Append(Friday).Append("\n");
            sb.Append("  Saturday: ").Append(Saturday).Append("\n");
            sb.Append("  Sunday: ").Append(Sunday).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as PortSchedule);
        }

        /// <summary>
        /// Returns true if PortSchedule instances are equal
        /// </summary>
        /// <param name="other">Instance of PortSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortSchedule other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Monday == other.Monday ||
						  Monday != null &&
						  Monday.Equals(other.Monday)
					 ) &&
					 (
						  Tuesday == other.Tuesday ||
						  Tuesday != null &&
						  Tuesday.Equals(other.Tuesday)
					 ) &&
					 (
						  Wednesday == other.Wednesday ||
						  Wednesday != null &&
						  Wednesday.Equals(other.Wednesday)
					 ) &&
					 (
						  Thursday == other.Thursday ||
						  Thursday != null &&
						  Thursday.Equals(other.Thursday)
					 ) &&
					 (
						  Friday == other.Friday ||
						  Friday != null &&
						  Friday.Equals(other.Friday)
					 ) &&
					 (
						  Saturday == other.Saturday ||
						  Saturday != null &&
						  Saturday.Equals(other.Saturday)
					 ) &&
					 (
						  Sunday == other.Sunday ||
						  Sunday != null &&
						  Sunday.Equals(other.Sunday)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Monday != null)
                    hash = hash * 59 + Monday.GetHashCode();
                if (Tuesday != null)
                    hash = hash * 59 + Tuesday.GetHashCode();
                if (Wednesday != null)
                    hash = hash * 59 + Wednesday.GetHashCode();
                if (Thursday != null)
                    hash = hash * 59 + Thursday.GetHashCode();
                if (Friday != null)
                    hash = hash * 59 + Friday.GetHashCode();
                if (Saturday != null)
                    hash = hash * 59 + Saturday.GetHashCode();
                if (Sunday != null)
                    hash = hash * 59 + Sunday.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
