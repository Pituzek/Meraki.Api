/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkSwitchSettingsStormControl
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkSwitchSettingsStormControl :  IEquatable<UpdateNetworkSwitchSettingsStormControl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkSwitchSettingsStormControl" /> class.
        /// </summary>
        /// <param name="BroadcastThreshold">Percentage (1 to 99) of total available port bandwidth for broadcast traffic type. Default value 100 percent rate is to clear the configuration..</param>
        /// <param name="MulticastThreshold">Percentage (1 to 99) of total available port bandwidth for multicast traffic type. Default value 100 percent rate is to clear the configuration..</param>
        /// <param name="UnknownUnicastThreshold">Percentage (1 to 99) of total available port bandwidth for unknown unicast (dlf-destination lookup failure) traffic type. Default value 100 percent rate is to clear the configuration..</param>
        public UpdateNetworkSwitchSettingsStormControl(int? BroadcastThreshold = default, int? MulticastThreshold = default, int? UnknownUnicastThreshold = default)
        {
            this.BroadcastThreshold = BroadcastThreshold;
            this.MulticastThreshold = MulticastThreshold;
            this.UnknownUnicastThreshold = UnknownUnicastThreshold;
        }

        /// <summary>
        /// Percentage (1 to 99) of total available port bandwidth for broadcast traffic type. Default value 100 percent rate is to clear the configuration.
        /// </summary>
        /// <value>Percentage (1 to 99) of total available port bandwidth for broadcast traffic type. Default value 100 percent rate is to clear the configuration.</value>
        [DataMember(Name="broadcastThreshold", EmitDefaultValue=false)]
        public int? BroadcastThreshold { get; set; }
        /// <summary>
        /// Percentage (1 to 99) of total available port bandwidth for multicast traffic type. Default value 100 percent rate is to clear the configuration.
        /// </summary>
        /// <value>Percentage (1 to 99) of total available port bandwidth for multicast traffic type. Default value 100 percent rate is to clear the configuration.</value>
        [DataMember(Name="multicastThreshold", EmitDefaultValue=false)]
        public int? MulticastThreshold { get; set; }
        /// <summary>
        /// Percentage (1 to 99) of total available port bandwidth for unknown unicast (dlf-destination lookup failure) traffic type. Default value 100 percent rate is to clear the configuration.
        /// </summary>
        /// <value>Percentage (1 to 99) of total available port bandwidth for unknown unicast (dlf-destination lookup failure) traffic type. Default value 100 percent rate is to clear the configuration.</value>
        [DataMember(Name="unknownUnicastThreshold", EmitDefaultValue=false)]
        public int? UnknownUnicastThreshold { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkSwitchSettingsStormControl {\n");
            sb.Append("  BroadcastThreshold: ").Append(BroadcastThreshold).Append("\n");
            sb.Append("  MulticastThreshold: ").Append(MulticastThreshold).Append("\n");
            sb.Append("  UnknownUnicastThreshold: ").Append(UnknownUnicastThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkSwitchSettingsStormControl);
        }

        /// <summary>
        /// Returns true if UpdateNetworkSwitchSettingsStormControl instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkSwitchSettingsStormControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkSwitchSettingsStormControl other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  BroadcastThreshold == other.BroadcastThreshold ||
						  BroadcastThreshold != null &&
						  BroadcastThreshold.Equals(other.BroadcastThreshold)
					 ) &&
					 (
						  MulticastThreshold == other.MulticastThreshold ||
						  MulticastThreshold != null &&
						  MulticastThreshold.Equals(other.MulticastThreshold)
					 ) &&
					 (
						  UnknownUnicastThreshold == other.UnknownUnicastThreshold ||
						  UnknownUnicastThreshold != null &&
						  UnknownUnicastThreshold.Equals(other.UnknownUnicastThreshold)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (BroadcastThreshold != null)
                    hash = hash * 59 + BroadcastThreshold.GetHashCode();
                if (MulticastThreshold != null)
                    hash = hash * 59 + MulticastThreshold.GetHashCode();
                if (UnknownUnicastThreshold != null)
                    hash = hash * 59 + UnknownUnicastThreshold.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
