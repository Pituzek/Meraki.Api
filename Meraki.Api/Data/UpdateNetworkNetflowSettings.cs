/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkNetflowSettings
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkNetflowSettings :  IEquatable<UpdateNetworkNetflowSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkNetflowSettings" /> class.
        /// </summary>
        /// <param name="ReportingEnabled">Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false)..</param>
        /// <param name="CollectorIp">The IPv4 address of the NetFlow collector..</param>
        /// <param name="CollectorPort">The port that the NetFlow collector will be listening on..</param>
        public UpdateNetworkNetflowSettings(bool? ReportingEnabled = default, string CollectorIp = default, int? CollectorPort = default)
        {
            this.ReportingEnabled = ReportingEnabled;
            this.CollectorIp = CollectorIp;
            this.CollectorPort = CollectorPort;
        }

        /// <summary>
        /// Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
        /// </summary>
        /// <value>Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).</value>
        [DataMember(Name="reportingEnabled", EmitDefaultValue=false)]
        public bool? ReportingEnabled { get; set; }
        /// <summary>
        /// The IPv4 address of the NetFlow collector.
        /// </summary>
        /// <value>The IPv4 address of the NetFlow collector.</value>
        [DataMember(Name="collectorIp", EmitDefaultValue=false)]
        public string CollectorIp { get; set; }
        /// <summary>
        /// The port that the NetFlow collector will be listening on.
        /// </summary>
        /// <value>The port that the NetFlow collector will be listening on.</value>
        [DataMember(Name="collectorPort", EmitDefaultValue=false)]
        public int? CollectorPort { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkNetflowSettings {\n");
            sb.Append("  ReportingEnabled: ").Append(ReportingEnabled).Append("\n");
            sb.Append("  CollectorIp: ").Append(CollectorIp).Append("\n");
            sb.Append("  CollectorPort: ").Append(CollectorPort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkNetflowSettings);
        }

        /// <summary>
        /// Returns true if UpdateNetworkNetflowSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkNetflowSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkNetflowSettings other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  ReportingEnabled == other.ReportingEnabled ||
						  (ReportingEnabled != null &&
						  ReportingEnabled.Equals(other.ReportingEnabled))
					 ) &&
					 (
						  CollectorIp == other.CollectorIp ||
						  (CollectorIp != null &&
						  CollectorIp.Equals(other.CollectorIp))
					 ) &&
					 (
						  CollectorPort == other.CollectorPort ||
						  (CollectorPort != null &&
						  CollectorPort.Equals(other.CollectorPort))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (ReportingEnabled != null)
				{
					hash = (hash * 59) + ReportingEnabled.GetHashCode();
				}

				if (CollectorIp != null)
				{
					hash = (hash * 59) + CollectorIp.GetHashCode();
				}

				if (CollectorPort != null)
				{
					hash = (hash * 59) + CollectorPort.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
