/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkStaticRoute
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkStaticRoute :  IEquatable<UpdateNetworkStaticRoute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkStaticRoute" /> class.
        /// </summary>
        /// <param name="Name">The name of the static route.</param>
        /// <param name="Subnet">The subnet of the static route.</param>
        /// <param name="GatewayIp">The gateway IP (next hop) of the static route.</param>
        /// <param name="Enabled">The enabled state of the static route.</param>
        /// <param name="FixedIpAssignments">The DHCP fixed IP assignments on the static route. This should be an object that contains mappings from MAC addresses to objects that themselves each contain \&quot;ip\&quot; and \&quot;name\&quot; string fields. See the sample request/response for more details..</param>
        /// <param name="ReservedIpRanges">The DHCP reserved IP ranges on the static route.</param>
        public UpdateNetworkStaticRoute(string Name = default, string Subnet = default, string GatewayIp = default, bool? Enabled = default, object FixedIpAssignments = default, List<ReservedIpRange1> ReservedIpRanges = default)
        {
            this.Name = Name;
            this.Subnet = Subnet;
            this.GatewayIp = GatewayIp;
            this.Enabled = Enabled;
            this.FixedIpAssignments = FixedIpAssignments;
            this.ReservedIpRanges = ReservedIpRanges;
        }

        /// <summary>
        /// The name of the static route
        /// </summary>
        /// <value>The name of the static route</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The subnet of the static route
        /// </summary>
        /// <value>The subnet of the static route</value>
        [DataMember(Name="subnet", EmitDefaultValue=false)]
        public string Subnet { get; set; }
        /// <summary>
        /// The gateway IP (next hop) of the static route
        /// </summary>
        /// <value>The gateway IP (next hop) of the static route</value>
        [DataMember(Name="gatewayIp", EmitDefaultValue=false)]
        public string GatewayIp { get; set; }
        /// <summary>
        /// The enabled state of the static route
        /// </summary>
        /// <value>The enabled state of the static route</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// The DHCP fixed IP assignments on the static route. This should be an object that contains mappings from MAC addresses to objects that themselves each contain \&quot;ip\&quot; and \&quot;name\&quot; string fields. See the sample request/response for more details.
        /// </summary>
        /// <value>The DHCP fixed IP assignments on the static route. This should be an object that contains mappings from MAC addresses to objects that themselves each contain \&quot;ip\&quot; and \&quot;name\&quot; string fields. See the sample request/response for more details.</value>
        [DataMember(Name="fixedIpAssignments", EmitDefaultValue=false)]
        public object FixedIpAssignments { get; set; }
        /// <summary>
        /// The DHCP reserved IP ranges on the static route
        /// </summary>
        /// <value>The DHCP reserved IP ranges on the static route</value>
        [DataMember(Name="reservedIpRanges", EmitDefaultValue=false)]
        public List<ReservedIpRange1> ReservedIpRanges { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkStaticRoute {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subnet: ").Append(Subnet).Append("\n");
            sb.Append("  GatewayIp: ").Append(GatewayIp).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  FixedIpAssignments: ").Append(FixedIpAssignments).Append("\n");
            sb.Append("  ReservedIpRanges: ").Append(ReservedIpRanges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkStaticRoute);
        }

        /// <summary>
        /// Returns true if UpdateNetworkStaticRoute instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkStaticRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkStaticRoute other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  Name != null &&
						  Name.Equals(other.Name)
					 ) &&
					 (
						  Subnet == other.Subnet ||
						  Subnet != null &&
						  Subnet.Equals(other.Subnet)
					 ) &&
					 (
						  GatewayIp == other.GatewayIp ||
						  GatewayIp != null &&
						  GatewayIp.Equals(other.GatewayIp)
					 ) &&
					 (
						  Enabled == other.Enabled ||
						  Enabled != null &&
						  Enabled.Equals(other.Enabled)
					 ) &&
					 (
						  FixedIpAssignments == other.FixedIpAssignments ||
						  FixedIpAssignments != null &&
						  FixedIpAssignments.Equals(other.FixedIpAssignments)
					 ) &&
					 (
						  ReservedIpRanges == other.ReservedIpRanges ||
						  ReservedIpRanges != null &&
						  ReservedIpRanges.SequenceEqual(other.ReservedIpRanges)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hash = hash * 59 + Name.GetHashCode();
                if (Subnet != null)
                    hash = hash * 59 + Subnet.GetHashCode();
                if (GatewayIp != null)
                    hash = hash * 59 + GatewayIp.GetHashCode();
                if (Enabled != null)
                    hash = hash * 59 + Enabled.GetHashCode();
                if (FixedIpAssignments != null)
                    hash = hash * 59 + FixedIpAssignments.GetHashCode();
                if (ReservedIpRanges != null)
                    hash = hash * 59 + ReservedIpRanges.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
