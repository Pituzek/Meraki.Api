/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Video quality and resolution settings for all the camera models.
	/// </summary>
	[DataContract]
    public partial class VideoSettings :  IEquatable<VideoSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoSettings" /> class.
        /// </summary>
        /// <param name="MV21MV71">MV21MV71.</param>
        /// <param name="MV12MV22MV72">MV12MV22MV72.</param>
        /// <param name="MV32">MV32.</param>
        /// <param name="MV12WE">MV12WE.</param>
        /// <param name="MV22XMV72X">MV22XMV72X.</param>
        /// <param name="MV02">MV02.</param>
        public VideoSettings(MV21MV71 MV21MV71 = default, MV12MV22MV72 MV12MV22MV72 = default, MV32 MV32 = default, MV12WE MV12WE = default, MV22XMV72X MV22XMV72X = default, MV02 MV02 = default)
        {
            this.MV21MV71 = MV21MV71;
            this.MV12MV22MV72 = MV12MV22MV72;
            this.MV32 = MV32;
            this.MV12WE = MV12WE;
            this.MV22XMV72X = MV22XMV72X;
            this.MV02 = MV02;
        }

        /// <summary>
        /// Gets or Sets MV21MV71
        /// </summary>
        [DataMember(Name="MV21/MV71", EmitDefaultValue=false)]
        public MV21MV71 MV21MV71 { get; set; }
        /// <summary>
        /// Gets or Sets MV12MV22MV72
        /// </summary>
        [DataMember(Name="MV12/MV22/MV72", EmitDefaultValue=false)]
        public MV12MV22MV72 MV12MV22MV72 { get; set; }
        /// <summary>
        /// Gets or Sets MV32
        /// </summary>
        [DataMember(Name="MV32", EmitDefaultValue=false)]
        public MV32 MV32 { get; set; }
        /// <summary>
        /// Gets or Sets MV12WE
        /// </summary>
        [DataMember(Name="MV12WE", EmitDefaultValue=false)]
        public MV12WE MV12WE { get; set; }
        /// <summary>
        /// Gets or Sets MV22XMV72X
        /// </summary>
        [DataMember(Name="MV22X/MV72X", EmitDefaultValue=false)]
        public MV22XMV72X MV22XMV72X { get; set; }
        /// <summary>
        /// Gets or Sets MV02
        /// </summary>
        [DataMember(Name="MV02", EmitDefaultValue=false)]
        public MV02 MV02 { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoSettings {\n");
            sb.Append("  MV21MV71: ").Append(MV21MV71).Append("\n");
            sb.Append("  MV12MV22MV72: ").Append(MV12MV22MV72).Append("\n");
            sb.Append("  MV32: ").Append(MV32).Append("\n");
            sb.Append("  MV12WE: ").Append(MV12WE).Append("\n");
            sb.Append("  MV22XMV72X: ").Append(MV22XMV72X).Append("\n");
            sb.Append("  MV02: ").Append(MV02).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as VideoSettings);
        }

        /// <summary>
        /// Returns true if VideoSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of VideoSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoSettings other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  MV21MV71 == other.MV21MV71 ||
						  MV21MV71 != null &&
						  MV21MV71.Equals(other.MV21MV71)
					 ) &&
					 (
						  MV12MV22MV72 == other.MV12MV22MV72 ||
						  MV12MV22MV72 != null &&
						  MV12MV22MV72.Equals(other.MV12MV22MV72)
					 ) &&
					 (
						  MV32 == other.MV32 ||
						  MV32 != null &&
						  MV32.Equals(other.MV32)
					 ) &&
					 (
						  MV12WE == other.MV12WE ||
						  MV12WE != null &&
						  MV12WE.Equals(other.MV12WE)
					 ) &&
					 (
						  MV22XMV72X == other.MV22XMV72X ||
						  MV22XMV72X != null &&
						  MV22XMV72X.Equals(other.MV22XMV72X)
					 ) &&
					 (
						  MV02 == other.MV02 ||
						  MV02 != null &&
						  MV02.Equals(other.MV02)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (MV21MV71 != null)
                    hash = hash * 59 + MV21MV71.GetHashCode();
                if (MV12MV22MV72 != null)
                    hash = hash * 59 + MV12MV22MV72.GetHashCode();
                if (MV32 != null)
                    hash = hash * 59 + MV32.GetHashCode();
                if (MV12WE != null)
                    hash = hash * 59 + MV12WE.GetHashCode();
                if (MV22XMV72X != null)
                    hash = hash * 59 + MV22XMV72X.GetHashCode();
                if (MV02 != null)
                    hash = hash * 59 + MV02.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
