/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Rule7
	/// </summary>
	[DataContract]
    public partial class Rule7 :  IEquatable<Rule7>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule7" /> class.
        /// </summary>
        [JsonConstructor]
        protected Rule7() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule7" /> class.
        /// </summary>
        /// <param name="PublicIp">The IP address that will be used to access the internal resource from the WAN (required).</param>
        /// <param name="Uplink">Uplink (required).</param>
        /// <param name="PortRules">An array of associated forwarding rules (required).</param>
        public Rule7(string PublicIp = default, Uplink1 Uplink = default, List<PortRule> PortRules = default)
        {
            // to ensure "PublicIp" is required (not null)
            if (PublicIp == null)
            {
                throw new InvalidDataException("PublicIp is a required property for Rule7 and cannot be null");
            }
            else
            {
                this.PublicIp = PublicIp;
            }
            // to ensure "Uplink" is required (not null)
            if (Uplink == null)
            {
                throw new InvalidDataException("Uplink is a required property for Rule7 and cannot be null");
            }
            else
            {
                this.Uplink = Uplink;
            }
            // to ensure "PortRules" is required (not null)
            if (PortRules == null)
            {
                throw new InvalidDataException("PortRules is a required property for Rule7 and cannot be null");
            }
            else
            {
                this.PortRules = PortRules;
            }
        }

        /// <summary>
        /// The IP address that will be used to access the internal resource from the WAN
        /// </summary>
        /// <value>The IP address that will be used to access the internal resource from the WAN</value>
        [DataMember(Name="publicIp", EmitDefaultValue=false)]
        public string PublicIp { get; set; }
        /// <summary>
        /// Gets or Sets Uplink
        /// </summary>
        [DataMember(Name="uplink", EmitDefaultValue=false)]
        public Uplink1 Uplink { get; set; }
        /// <summary>
        /// An array of associated forwarding rules
        /// </summary>
        /// <value>An array of associated forwarding rules</value>
        [DataMember(Name="portRules", EmitDefaultValue=false)]
        public List<PortRule> PortRules { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rule7 {\n");
            sb.Append("  PublicIp: ").Append(PublicIp).Append("\n");
            sb.Append("  Uplink: ").Append(Uplink).Append("\n");
            sb.Append("  PortRules: ").Append(PortRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Rule7);
        }

        /// <summary>
        /// Returns true if Rule7 instances are equal
        /// </summary>
        /// <param name="other">Instance of Rule7 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rule7 other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  PublicIp == other.PublicIp ||
						  (PublicIp != null &&
						  PublicIp.Equals(other.PublicIp))
					 ) &&
					 (
						  Uplink == other.Uplink ||
						  (Uplink != null &&
						  Uplink.Equals(other.Uplink))
					 ) &&
					 (
						  PortRules == other.PortRules ||
						  (PortRules != null &&
						  PortRules.SequenceEqual(other.PortRules))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (PublicIp != null)
				{
					hash = (hash * 59) + PublicIp.GetHashCode();
				}

				if (Uplink != null)
				{
					hash = (hash * 59) + Uplink.GetHashCode();
				}

				if (PortRules != null)
				{
					hash = (hash * 59) + PortRules.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
