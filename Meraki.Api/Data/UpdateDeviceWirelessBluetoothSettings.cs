/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateDeviceWirelessBluetoothSettings
	/// </summary>
	[DataContract]
    public partial class UpdateDeviceWirelessBluetoothSettings :  IEquatable<UpdateDeviceWirelessBluetoothSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDeviceWirelessBluetoothSettings" /> class.
        /// </summary>
        /// <param name="Uuid">Desired UUID of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value..</param>
        /// <param name="Major">Desired major value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value..</param>
        /// <param name="Minor">Desired minor value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value..</param>
        public UpdateDeviceWirelessBluetoothSettings(string Uuid = default, int? Major = default, int? Minor = default)
        {
            this.Uuid = Uuid;
            this.Major = Major;
            this.Minor = Minor;
        }

        /// <summary>
        /// Desired UUID of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
        /// </summary>
        /// <value>Desired UUID of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }
        /// <summary>
        /// Desired major value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
        /// </summary>
        /// <value>Desired major value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.</value>
        [DataMember(Name="major", EmitDefaultValue=false)]
        public int? Major { get; set; }
        /// <summary>
        /// Desired minor value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
        /// </summary>
        /// <value>Desired minor value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.</value>
        [DataMember(Name="minor", EmitDefaultValue=false)]
        public int? Minor { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateDeviceWirelessBluetoothSettings {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateDeviceWirelessBluetoothSettings);
        }

        /// <summary>
        /// Returns true if UpdateDeviceWirelessBluetoothSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateDeviceWirelessBluetoothSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateDeviceWirelessBluetoothSettings other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Uuid == other.Uuid ||
						  (Uuid != null &&
						  Uuid.Equals(other.Uuid))
					 ) &&
					 (
						  Major == other.Major ||
						  (Major != null &&
						  Major.Equals(other.Major))
					 ) &&
					 (
						  Minor == other.Minor ||
						  (Minor != null &&
						  Minor.Equals(other.Minor))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Uuid != null)
				{
					hash = (hash * 59) + Uuid.GetHashCode();
				}

				if (Major != null)
				{
					hash = (hash * 59) + Major.GetHashCode();
				}

				if (Minor != null)
				{
					hash = (hash * 59) + Minor.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
