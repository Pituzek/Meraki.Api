/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in &#39;passthrough&#39; mode
	/// </summary>
	[DataContract]
    public partial class ProtectedNetworks :  IEquatable<ProtectedNetworks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectedNetworks" /> class.
        /// </summary>
        /// <param name="UseDefault">true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved.</param>
        /// <param name="IncludedCidr">list of IP addresses or subnets being protected (required if &#39;useDefault&#39; is false).</param>
        /// <param name="ExcludedCidr">list of IP addresses or subnets being excluded from protection (required if &#39;useDefault&#39; is false).</param>
        public ProtectedNetworks(bool? UseDefault = default, List<string> IncludedCidr = default, List<string> ExcludedCidr = default)
        {
            this.UseDefault = UseDefault;
            this.IncludedCidr = IncludedCidr;
            this.ExcludedCidr = ExcludedCidr;
        }

        /// <summary>
        /// true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved
        /// </summary>
        /// <value>true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved</value>
        [DataMember(Name="useDefault", EmitDefaultValue=false)]
        public bool? UseDefault { get; set; }
        /// <summary>
        /// list of IP addresses or subnets being protected (required if &#39;useDefault&#39; is false)
        /// </summary>
        /// <value>list of IP addresses or subnets being protected (required if &#39;useDefault&#39; is false)</value>
        [DataMember(Name="includedCidr", EmitDefaultValue=false)]
        public List<string> IncludedCidr { get; set; }
        /// <summary>
        /// list of IP addresses or subnets being excluded from protection (required if &#39;useDefault&#39; is false)
        /// </summary>
        /// <value>list of IP addresses or subnets being excluded from protection (required if &#39;useDefault&#39; is false)</value>
        [DataMember(Name="excludedCidr", EmitDefaultValue=false)]
        public List<string> ExcludedCidr { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProtectedNetworks {\n");
            sb.Append("  UseDefault: ").Append(UseDefault).Append("\n");
            sb.Append("  IncludedCidr: ").Append(IncludedCidr).Append("\n");
            sb.Append("  ExcludedCidr: ").Append(ExcludedCidr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as ProtectedNetworks);
        }

        /// <summary>
        /// Returns true if ProtectedNetworks instances are equal
        /// </summary>
        /// <param name="other">Instance of ProtectedNetworks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProtectedNetworks other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  UseDefault == other.UseDefault ||
						  (UseDefault != null &&
						  UseDefault.Equals(other.UseDefault))
					 ) &&
					 (
						  IncludedCidr == other.IncludedCidr ||
						  (IncludedCidr != null &&
						  IncludedCidr.SequenceEqual(other.IncludedCidr))
					 ) &&
					 (
						  ExcludedCidr == other.ExcludedCidr ||
						  (ExcludedCidr != null &&
						  ExcludedCidr.SequenceEqual(other.ExcludedCidr))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (UseDefault != null)
				{
					hash = (hash * 59) + UseDefault.GetHashCode();
				}

				if (IncludedCidr != null)
				{
					hash = (hash * 59) + IncludedCidr.GetHashCode();
				}

				if (ExcludedCidr != null)
				{
					hash = (hash * 59) + ExcludedCidr.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
