/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkDevice
	/// </summary>
	[DataContract]
    public partial class DeviceUpdateDto :  IEquatable<DeviceUpdateDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceUpdateDto" /> class.
        /// </summary>
        /// <param name="Name">The name of a device.</param>
        /// <param name="Tags">The tags of a device.</param>
        /// <param name="Lat">The latitude of a device.</param>
        /// <param name="Lng">The longitude of a device.</param>
        /// <param name="Address">The address of a device.</param>
        /// <param name="Notes">The notes for the device. String. Limited to 255 characters..</param>
        /// <param name="MoveMapMarker">Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified..</param>
        /// <param name="SwitchProfileId">The ID of a switch profile to bind to the device (for available switch profiles, see the &#39;Switch Profiles&#39; endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch profile, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template..</param>
        /// <param name="FloorPlanId">The floor plan to associate to this device. null disassociates the device from the floorplan..</param>
        public DeviceUpdateDto(string Name = default, string Tags = default, double? Lat = default, double? Lng = default, string Address = default, string Notes = default, bool? MoveMapMarker = default, string SwitchProfileId = default, string FloorPlanId = default)
        {
            this.Name = Name;
            this.Tags = Tags;
            this.Lat = Lat;
            this.Lng = Lng;
            this.Address = Address;
            this.Notes = Notes;
            this.MoveMapMarker = MoveMapMarker;
            this.SwitchProfileId = SwitchProfileId;
            this.FloorPlanId = FloorPlanId;
        }

        /// <summary>
        /// The name of a device
        /// </summary>
        /// <value>The name of a device</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The tags of a device
        /// </summary>
        /// <value>The tags of a device</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }
        /// <summary>
        /// The latitude of a device
        /// </summary>
        /// <value>The latitude of a device</value>
        [DataMember(Name="lat", EmitDefaultValue=false)]
        public double? Lat { get; set; }
        /// <summary>
        /// The longitude of a device
        /// </summary>
        /// <value>The longitude of a device</value>
        [DataMember(Name="lng", EmitDefaultValue=false)]
        public double? Lng { get; set; }
        /// <summary>
        /// The address of a device
        /// </summary>
        /// <value>The address of a device</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// The notes for the device. String. Limited to 255 characters.
        /// </summary>
        /// <value>The notes for the device. String. Limited to 255 characters.</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
        /// </summary>
        /// <value>Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.</value>
        [DataMember(Name="moveMapMarker", EmitDefaultValue=false)]
        public bool? MoveMapMarker { get; set; }
        /// <summary>
        /// The ID of a switch profile to bind to the device (for available switch profiles, see the &#39;Switch Profiles&#39; endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch profile, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
        /// </summary>
        /// <value>The ID of a switch profile to bind to the device (for available switch profiles, see the &#39;Switch Profiles&#39; endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch profile, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.</value>
        [DataMember(Name="switchProfileId", EmitDefaultValue=false)]
        public string SwitchProfileId { get; set; }
        /// <summary>
        /// The floor plan to associate to this device. null disassociates the device from the floorplan.
        /// </summary>
        /// <value>The floor plan to associate to this device. null disassociates the device from the floorplan.</value>
        [DataMember(Name="floorPlanId", EmitDefaultValue=false)]
        public string FloorPlanId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkDevice {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lng: ").Append(Lng).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  MoveMapMarker: ").Append(MoveMapMarker).Append("\n");
            sb.Append("  SwitchProfileId: ").Append(SwitchProfileId).Append("\n");
            sb.Append("  FloorPlanId: ").Append(FloorPlanId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as DeviceUpdateDto);
        }

        /// <summary>
        /// Returns true if UpdateNetworkDevice instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkDevice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceUpdateDto other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  (Name != null &&
						  Name.Equals(other.Name))
					 ) &&
					 (
						  Tags == other.Tags ||
						  (Tags != null &&
						  Tags.Equals(other.Tags))
					 ) &&
					 (
						  Lat == other.Lat ||
						  (Lat != null &&
						  Lat.Equals(other.Lat))
					 ) &&
					 (
						  Lng == other.Lng ||
						  (Lng != null &&
						  Lng.Equals(other.Lng))
					 ) &&
					 (
						  Address == other.Address ||
						  (Address != null &&
						  Address.Equals(other.Address))
					 ) &&
					 (
						  Notes == other.Notes ||
						  (Notes != null &&
						  Notes.Equals(other.Notes))
					 ) &&
					 (
						  MoveMapMarker == other.MoveMapMarker ||
						  (MoveMapMarker != null &&
						  MoveMapMarker.Equals(other.MoveMapMarker))
					 ) &&
					 (
						  SwitchProfileId == other.SwitchProfileId ||
						  (SwitchProfileId != null &&
						  SwitchProfileId.Equals(other.SwitchProfileId))
					 ) &&
					 (
						  FloorPlanId == other.FloorPlanId ||
						  (FloorPlanId != null &&
						  FloorPlanId.Equals(other.FloorPlanId))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
				{
					hash = (hash * 59) + Name.GetHashCode();
				}

				if (Tags != null)
				{
					hash = (hash * 59) + Tags.GetHashCode();
				}

				if (Lat != null)
				{
					hash = (hash * 59) + Lat.GetHashCode();
				}

				if (Lng != null)
				{
					hash = (hash * 59) + Lng.GetHashCode();
				}

				if (Address != null)
				{
					hash = (hash * 59) + Address.GetHashCode();
				}

				if (Notes != null)
				{
					hash = (hash * 59) + Notes.GetHashCode();
				}

				if (MoveMapMarker != null)
				{
					hash = (hash * 59) + MoveMapMarker.GetHashCode();
				}

				if (SwitchProfileId != null)
				{
					hash = (hash * 59) + SwitchProfileId.GetHashCode();
				}

				if (FloorPlanId != null)
				{
					hash = (hash * 59) + FloorPlanId.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
