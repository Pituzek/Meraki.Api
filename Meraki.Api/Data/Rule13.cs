/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Rule13
	/// </summary>
	[DataContract]
    public partial class Rule13 :  IEquatable<Rule13>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule13" /> class.
        /// </summary>
        [JsonConstructor]
        protected Rule13() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule13" /> class.
        /// </summary>
        /// <param name="Definitions">A list of objects describing the definitions of your traffic shaping rule. At least one definition is required. (required).</param>
        /// <param name="PerClientBandwidthLimits">PerClientBandwidthLimits.</param>
        /// <param name="DscpTagValue">The DSCP tag applied by your rule. null means &#39;Do not change DSCP tag&#39;.     For a list of possible tag values, use the trafficShaping/dscpTaggingOptions endpoint..</param>
        /// <param name="Priority">A string, indicating the priority level for packets bound to your rule.     Can be &#39;low&#39;, &#39;normal&#39; or &#39;high&#39;..</param>
        public Rule13(List<Definition> Definitions = default, PerClientBandwidthLimits PerClientBandwidthLimits = default, int? DscpTagValue = default, string Priority = default)
        {
            // to ensure "Definitions" is required (not null)
            if (Definitions == null)
            {
                throw new InvalidDataException("Definitions is a required property for Rule13 and cannot be null");
            }
            else
            {
                this.Definitions = Definitions;
            }
            this.PerClientBandwidthLimits = PerClientBandwidthLimits;
            this.DscpTagValue = DscpTagValue;
            this.Priority = Priority;
        }

        /// <summary>
        /// A list of objects describing the definitions of your traffic shaping rule. At least one definition is required.
        /// </summary>
        /// <value>A list of objects describing the definitions of your traffic shaping rule. At least one definition is required.</value>
        [DataMember(Name="definitions", EmitDefaultValue=false)]
        public List<Definition> Definitions { get; set; }
        /// <summary>
        /// Gets or Sets PerClientBandwidthLimits
        /// </summary>
        [DataMember(Name="perClientBandwidthLimits", EmitDefaultValue=false)]
        public PerClientBandwidthLimits PerClientBandwidthLimits { get; set; }
        /// <summary>
        /// The DSCP tag applied by your rule. null means &#39;Do not change DSCP tag&#39;.     For a list of possible tag values, use the trafficShaping/dscpTaggingOptions endpoint.
        /// </summary>
        /// <value>The DSCP tag applied by your rule. null means &#39;Do not change DSCP tag&#39;.     For a list of possible tag values, use the trafficShaping/dscpTaggingOptions endpoint.</value>
        [DataMember(Name="dscpTagValue", EmitDefaultValue=false)]
        public int? DscpTagValue { get; set; }
        /// <summary>
        /// A string, indicating the priority level for packets bound to your rule.     Can be &#39;low&#39;, &#39;normal&#39; or &#39;high&#39;.
        /// </summary>
        /// <value>A string, indicating the priority level for packets bound to your rule.     Can be &#39;low&#39;, &#39;normal&#39; or &#39;high&#39;.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public string Priority { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rule13 {\n");
            sb.Append("  Definitions: ").Append(Definitions).Append("\n");
            sb.Append("  PerClientBandwidthLimits: ").Append(PerClientBandwidthLimits).Append("\n");
            sb.Append("  DscpTagValue: ").Append(DscpTagValue).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Rule13);
        }

        /// <summary>
        /// Returns true if Rule13 instances are equal
        /// </summary>
        /// <param name="other">Instance of Rule13 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rule13 other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Definitions == other.Definitions ||
						  Definitions != null &&
						  Definitions.SequenceEqual(other.Definitions)
					 ) &&
					 (
						  PerClientBandwidthLimits == other.PerClientBandwidthLimits ||
						  PerClientBandwidthLimits != null &&
						  PerClientBandwidthLimits.Equals(other.PerClientBandwidthLimits)
					 ) &&
					 (
						  DscpTagValue == other.DscpTagValue ||
						  DscpTagValue != null &&
						  DscpTagValue.Equals(other.DscpTagValue)
					 ) &&
					 (
						  Priority == other.Priority ||
						  Priority != null &&
						  Priority.Equals(other.Priority)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Definitions != null)
                    hash = hash * 59 + Definitions.GetHashCode();
                if (PerClientBandwidthLimits != null)
                    hash = hash * 59 + PerClientBandwidthLimits.GetHashCode();
                if (DscpTagValue != null)
                    hash = hash * 59 + DscpTagValue.GetHashCode();
                if (Priority != null)
                    hash = hash * 59 + Priority.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
