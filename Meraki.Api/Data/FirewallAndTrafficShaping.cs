/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// The firewall and traffic shaping rules and settings for your policy.
	/// </summary>
	[DataContract]
    public partial class FirewallAndTrafficShaping :  IEquatable<FirewallAndTrafficShaping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirewallAndTrafficShaping" /> class.
        /// </summary>
        /// <param name="Settings">Settings.</param>
        /// <param name="TrafficShapingRules">An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules..</param>
        /// <param name="L3FirewallRules">An ordered array of the L3 firewall rules.</param>
        /// <param name="L7FirewallRules">An ordered array of L7 firewall rules.</param>
        public FirewallAndTrafficShaping(Settings1 Settings = default, List<TrafficShapingRule> TrafficShapingRules = default, List<L3FirewallRule> L3FirewallRules = default, List<L7FirewallRule> L7FirewallRules = default)
        {
            this.Settings = Settings;
            this.TrafficShapingRules = TrafficShapingRules;
            this.L3FirewallRules = L3FirewallRules;
            this.L7FirewallRules = L7FirewallRules;
        }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public Settings1 Settings { get; set; }
        /// <summary>
        /// An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules.
        /// </summary>
        /// <value>An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules.</value>
        [DataMember(Name="trafficShapingRules", EmitDefaultValue=false)]
        public List<TrafficShapingRule> TrafficShapingRules { get; set; }
        /// <summary>
        /// An ordered array of the L3 firewall rules
        /// </summary>
        /// <value>An ordered array of the L3 firewall rules</value>
        [DataMember(Name="l3FirewallRules", EmitDefaultValue=false)]
        public List<L3FirewallRule> L3FirewallRules { get; set; }
        /// <summary>
        /// An ordered array of L7 firewall rules
        /// </summary>
        /// <value>An ordered array of L7 firewall rules</value>
        [DataMember(Name="l7FirewallRules", EmitDefaultValue=false)]
        public List<L7FirewallRule> L7FirewallRules { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FirewallAndTrafficShaping {\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  TrafficShapingRules: ").Append(TrafficShapingRules).Append("\n");
            sb.Append("  L3FirewallRules: ").Append(L3FirewallRules).Append("\n");
            sb.Append("  L7FirewallRules: ").Append(L7FirewallRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as FirewallAndTrafficShaping);
        }

        /// <summary>
        /// Returns true if FirewallAndTrafficShaping instances are equal
        /// </summary>
        /// <param name="other">Instance of FirewallAndTrafficShaping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FirewallAndTrafficShaping other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Settings == other.Settings ||
						  (Settings != null &&
						  Settings.Equals(other.Settings))
					 ) &&
					 (
						  TrafficShapingRules == other.TrafficShapingRules ||
						  (TrafficShapingRules != null &&
						  TrafficShapingRules.SequenceEqual(other.TrafficShapingRules))
					 ) &&
					 (
						  L3FirewallRules == other.L3FirewallRules ||
						  (L3FirewallRules != null &&
						  L3FirewallRules.SequenceEqual(other.L3FirewallRules))
					 ) &&
					 (
						  L7FirewallRules == other.L7FirewallRules ||
						  (L7FirewallRules != null &&
						  L7FirewallRules.SequenceEqual(other.L7FirewallRules))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Settings != null)
				{
					hash = (hash * 59) + Settings.GetHashCode();
				}

				if (TrafficShapingRules != null)
				{
					hash = (hash * 59) + TrafficShapingRules.GetHashCode();
				}

				if (L3FirewallRules != null)
				{
					hash = (hash * 59) + L3FirewallRules.GetHashCode();
				}

				if (L7FirewallRules != null)
				{
					hash = (hash * 59) + L7FirewallRules.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
