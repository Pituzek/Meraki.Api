/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// CreateNetworkPiiRequest
	/// </summary>
	[DataContract]
    public partial class CreateNetworkPiiRequest :  IEquatable<CreateNetworkPiiRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNetworkPiiRequest" /> class.
        /// </summary>
        /// <param name="Type">Type.</param>
        /// <param name="Datasets">The datasets related to the provided key that should be deleted. Only applies to \&quot;delete\&quot; requests. The value \&quot;all\&quot; will be expanded to all datasets applicable to this type. The datasets by applicable to each type are: mac (usage, events, traffic), email (users, loginAttempts), username (users, loginAttempts), bluetoothMac (client, connectivity), smDeviceId (device), smUserId (user).</param>
        /// <param name="Username">The username of a network log in. Only applies to \&quot;delete\&quot; requests..</param>
        /// <param name="Email">The email of a network user account. Only applies to \&quot;delete\&quot; requests..</param>
        /// <param name="Mac">The MAC of a network client device. Applies to both \&quot;restrict processing\&quot; and \&quot;delete\&quot; requests..</param>
        /// <param name="SmDeviceId">The sm_device_id of a Systems Manager device. The only way to \&quot;restrict processing\&quot; or \&quot;delete\&quot; a Systems Manager device. Must include \&quot;device\&quot; in the dataset for a \&quot;delete\&quot; request to destroy the device..</param>
        /// <param name="SmUserId">The sm_user_id of a Systems Manager user. The only way to \&quot;restrict processing\&quot; or \&quot;delete\&quot; a Systems Manager user. Must include \&quot;user\&quot; in the dataset for a \&quot;delete\&quot; request to destroy the user..</param>
        public CreateNetworkPiiRequest(Type6 Type = default, List<string> Datasets = default, string Username = default, string Email = default, string Mac = default, string SmDeviceId = default, string SmUserId = default)
        {
            this.Type = Type;
            this.Datasets = Datasets;
            this.Username = Username;
            this.Email = Email;
            this.Mac = Mac;
            this.SmDeviceId = SmDeviceId;
            this.SmUserId = SmUserId;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public Type6 Type { get; set; }
        /// <summary>
        /// The datasets related to the provided key that should be deleted. Only applies to \&quot;delete\&quot; requests. The value \&quot;all\&quot; will be expanded to all datasets applicable to this type. The datasets by applicable to each type are: mac (usage, events, traffic), email (users, loginAttempts), username (users, loginAttempts), bluetoothMac (client, connectivity), smDeviceId (device), smUserId (user)
        /// </summary>
        /// <value>The datasets related to the provided key that should be deleted. Only applies to \&quot;delete\&quot; requests. The value \&quot;all\&quot; will be expanded to all datasets applicable to this type. The datasets by applicable to each type are: mac (usage, events, traffic), email (users, loginAttempts), username (users, loginAttempts), bluetoothMac (client, connectivity), smDeviceId (device), smUserId (user)</value>
        [DataMember(Name="datasets", EmitDefaultValue=false)]
        public List<string> Datasets { get; set; }
        /// <summary>
        /// The username of a network log in. Only applies to \&quot;delete\&quot; requests.
        /// </summary>
        /// <value>The username of a network log in. Only applies to \&quot;delete\&quot; requests.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }
        /// <summary>
        /// The email of a network user account. Only applies to \&quot;delete\&quot; requests.
        /// </summary>
        /// <value>The email of a network user account. Only applies to \&quot;delete\&quot; requests.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The MAC of a network client device. Applies to both \&quot;restrict processing\&quot; and \&quot;delete\&quot; requests.
        /// </summary>
        /// <value>The MAC of a network client device. Applies to both \&quot;restrict processing\&quot; and \&quot;delete\&quot; requests.</value>
        [DataMember(Name="mac", EmitDefaultValue=false)]
        public string Mac { get; set; }
        /// <summary>
        /// The sm_device_id of a Systems Manager device. The only way to \&quot;restrict processing\&quot; or \&quot;delete\&quot; a Systems Manager device. Must include \&quot;device\&quot; in the dataset for a \&quot;delete\&quot; request to destroy the device.
        /// </summary>
        /// <value>The sm_device_id of a Systems Manager device. The only way to \&quot;restrict processing\&quot; or \&quot;delete\&quot; a Systems Manager device. Must include \&quot;device\&quot; in the dataset for a \&quot;delete\&quot; request to destroy the device.</value>
        [DataMember(Name="smDeviceId", EmitDefaultValue=false)]
        public string SmDeviceId { get; set; }
        /// <summary>
        /// The sm_user_id of a Systems Manager user. The only way to \&quot;restrict processing\&quot; or \&quot;delete\&quot; a Systems Manager user. Must include \&quot;user\&quot; in the dataset for a \&quot;delete\&quot; request to destroy the user.
        /// </summary>
        /// <value>The sm_user_id of a Systems Manager user. The only way to \&quot;restrict processing\&quot; or \&quot;delete\&quot; a Systems Manager user. Must include \&quot;user\&quot; in the dataset for a \&quot;delete\&quot; request to destroy the user.</value>
        [DataMember(Name="smUserId", EmitDefaultValue=false)]
        public string SmUserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateNetworkPiiRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Datasets: ").Append(Datasets).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Mac: ").Append(Mac).Append("\n");
            sb.Append("  SmDeviceId: ").Append(SmDeviceId).Append("\n");
            sb.Append("  SmUserId: ").Append(SmUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as CreateNetworkPiiRequest);
        }

        /// <summary>
        /// Returns true if CreateNetworkPiiRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateNetworkPiiRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateNetworkPiiRequest other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Type == other.Type ||
						  Type != null &&
						  Type.Equals(other.Type)
					 ) &&
					 (
						  Datasets == other.Datasets ||
						  Datasets != null &&
						  Datasets.SequenceEqual(other.Datasets)
					 ) &&
					 (
						  Username == other.Username ||
						  Username != null &&
						  Username.Equals(other.Username)
					 ) &&
					 (
						  Email == other.Email ||
						  Email != null &&
						  Email.Equals(other.Email)
					 ) &&
					 (
						  Mac == other.Mac ||
						  Mac != null &&
						  Mac.Equals(other.Mac)
					 ) &&
					 (
						  SmDeviceId == other.SmDeviceId ||
						  SmDeviceId != null &&
						  SmDeviceId.Equals(other.SmDeviceId)
					 ) &&
					 (
						  SmUserId == other.SmUserId ||
						  SmUserId != null &&
						  SmUserId.Equals(other.SmUserId)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Type != null)
                    hash = hash * 59 + Type.GetHashCode();
                if (Datasets != null)
                    hash = hash * 59 + Datasets.GetHashCode();
                if (Username != null)
                    hash = hash * 59 + Username.GetHashCode();
                if (Email != null)
                    hash = hash * 59 + Email.GetHashCode();
                if (Mac != null)
                    hash = hash * 59 + Mac.GetHashCode();
                if (SmDeviceId != null)
                    hash = hash * 59 + SmDeviceId.GetHashCode();
                if (SmUserId != null)
                    hash = hash * 59 + SmUserId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
