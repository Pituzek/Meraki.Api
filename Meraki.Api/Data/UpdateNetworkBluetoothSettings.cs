/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkBluetoothSettings
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkBluetoothSettings :  IEquatable<UpdateNetworkBluetoothSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkBluetoothSettings" /> class.
        /// </summary>
        /// <param name="ScanningEnabled">Whether APs will scan for Bluetooth enabled clients. (true, false).</param>
        /// <param name="AdvertisingEnabled">Whether APs will advertise beacons. (true, false).</param>
        /// <param name="Uuid">The UUID to be used in the beacon identifier..</param>
        /// <param name="MajorMinorAssignmentMode">MajorMinorAssignmentMode.</param>
        /// <param name="Major">The major number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode..</param>
        /// <param name="Minor">The minor number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode..</param>
        public UpdateNetworkBluetoothSettings(bool? ScanningEnabled = default, bool? AdvertisingEnabled = default, string Uuid = default, MajorMinorAssignmentMode MajorMinorAssignmentMode = default, int? Major = default, int? Minor = default)
        {
            this.ScanningEnabled = ScanningEnabled;
            this.AdvertisingEnabled = AdvertisingEnabled;
            this.Uuid = Uuid;
            this.MajorMinorAssignmentMode = MajorMinorAssignmentMode;
            this.Major = Major;
            this.Minor = Minor;
        }

        /// <summary>
        /// Whether APs will scan for Bluetooth enabled clients. (true, false)
        /// </summary>
        /// <value>Whether APs will scan for Bluetooth enabled clients. (true, false)</value>
        [DataMember(Name="scanningEnabled", EmitDefaultValue=false)]
        public bool? ScanningEnabled { get; set; }
        /// <summary>
        /// Whether APs will advertise beacons. (true, false)
        /// </summary>
        /// <value>Whether APs will advertise beacons. (true, false)</value>
        [DataMember(Name="advertisingEnabled", EmitDefaultValue=false)]
        public bool? AdvertisingEnabled { get; set; }
        /// <summary>
        /// The UUID to be used in the beacon identifier.
        /// </summary>
        /// <value>The UUID to be used in the beacon identifier.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }
        /// <summary>
        /// Gets or Sets MajorMinorAssignmentMode
        /// </summary>
        [DataMember(Name="majorMinorAssignmentMode", EmitDefaultValue=false)]
        public MajorMinorAssignmentMode MajorMinorAssignmentMode { get; set; }
        /// <summary>
        /// The major number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
        /// </summary>
        /// <value>The major number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.</value>
        [DataMember(Name="major", EmitDefaultValue=false)]
        public int? Major { get; set; }
        /// <summary>
        /// The minor number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
        /// </summary>
        /// <value>The minor number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.</value>
        [DataMember(Name="minor", EmitDefaultValue=false)]
        public int? Minor { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkBluetoothSettings {\n");
            sb.Append("  ScanningEnabled: ").Append(ScanningEnabled).Append("\n");
            sb.Append("  AdvertisingEnabled: ").Append(AdvertisingEnabled).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  MajorMinorAssignmentMode: ").Append(MajorMinorAssignmentMode).Append("\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkBluetoothSettings);
        }

        /// <summary>
        /// Returns true if UpdateNetworkBluetoothSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkBluetoothSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkBluetoothSettings other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  ScanningEnabled == other.ScanningEnabled ||
						  ScanningEnabled != null &&
						  ScanningEnabled.Equals(other.ScanningEnabled)
					 ) &&
					 (
						  AdvertisingEnabled == other.AdvertisingEnabled ||
						  AdvertisingEnabled != null &&
						  AdvertisingEnabled.Equals(other.AdvertisingEnabled)
					 ) &&
					 (
						  Uuid == other.Uuid ||
						  Uuid != null &&
						  Uuid.Equals(other.Uuid)
					 ) &&
					 (
						  MajorMinorAssignmentMode == other.MajorMinorAssignmentMode ||
						  MajorMinorAssignmentMode != null &&
						  MajorMinorAssignmentMode.Equals(other.MajorMinorAssignmentMode)
					 ) &&
					 (
						  Major == other.Major ||
						  Major != null &&
						  Major.Equals(other.Major)
					 ) &&
					 (
						  Minor == other.Minor ||
						  Minor != null &&
						  Minor.Equals(other.Minor)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (ScanningEnabled != null)
                    hash = hash * 59 + ScanningEnabled.GetHashCode();
                if (AdvertisingEnabled != null)
                    hash = hash * 59 + AdvertisingEnabled.GetHashCode();
                if (Uuid != null)
                    hash = hash * 59 + Uuid.GetHashCode();
                if (MajorMinorAssignmentMode != null)
                    hash = hash * 59 + MajorMinorAssignmentMode.GetHashCode();
                if (Major != null)
                    hash = hash * 59 + Major.GetHashCode();
                if (Minor != null)
                    hash = hash * 59 + Minor.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
