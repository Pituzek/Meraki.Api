/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkCellularGatewaySettingsDhcp
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkCellularGatewaySettingsDhcp :  IEquatable<UpdateNetworkCellularGatewaySettingsDhcp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkCellularGatewaySettingsDhcp" /> class.
        /// </summary>
        /// <param name="DhcpLeaseTime">DHCP Lease time for all MG of the network. It can be &#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;..</param>
        /// <param name="DnsNameservers">DNS name servers mode for all MG of the network. It can take 4 different values: &#39;upstream_dns&#39;, &#39;google_dns&#39;, &#39;opendns&#39;, &#39;custom&#39;..</param>
        /// <param name="DnsCustomNameservers">list of fixed IP representing the the DNS Name servers when the mode is &#39;custom&#39;.</param>
        public UpdateNetworkCellularGatewaySettingsDhcp(string DhcpLeaseTime = default, string DnsNameservers = default, List<string> DnsCustomNameservers = default)
        {
            this.DhcpLeaseTime = DhcpLeaseTime;
            this.DnsNameservers = DnsNameservers;
            this.DnsCustomNameservers = DnsCustomNameservers;
        }

        /// <summary>
        /// DHCP Lease time for all MG of the network. It can be &#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;.
        /// </summary>
        /// <value>DHCP Lease time for all MG of the network. It can be &#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;.</value>
        [DataMember(Name="dhcpLeaseTime", EmitDefaultValue=false)]
        public string DhcpLeaseTime { get; set; }
        /// <summary>
        /// DNS name servers mode for all MG of the network. It can take 4 different values: &#39;upstream_dns&#39;, &#39;google_dns&#39;, &#39;opendns&#39;, &#39;custom&#39;.
        /// </summary>
        /// <value>DNS name servers mode for all MG of the network. It can take 4 different values: &#39;upstream_dns&#39;, &#39;google_dns&#39;, &#39;opendns&#39;, &#39;custom&#39;.</value>
        [DataMember(Name="dnsNameservers", EmitDefaultValue=false)]
        public string DnsNameservers { get; set; }
        /// <summary>
        /// list of fixed IP representing the the DNS Name servers when the mode is &#39;custom&#39;
        /// </summary>
        /// <value>list of fixed IP representing the the DNS Name servers when the mode is &#39;custom&#39;</value>
        [DataMember(Name="dnsCustomNameservers", EmitDefaultValue=false)]
        public List<string> DnsCustomNameservers { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkCellularGatewaySettingsDhcp {\n");
            sb.Append("  DhcpLeaseTime: ").Append(DhcpLeaseTime).Append("\n");
            sb.Append("  DnsNameservers: ").Append(DnsNameservers).Append("\n");
            sb.Append("  DnsCustomNameservers: ").Append(DnsCustomNameservers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkCellularGatewaySettingsDhcp);
        }

        /// <summary>
        /// Returns true if UpdateNetworkCellularGatewaySettingsDhcp instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkCellularGatewaySettingsDhcp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkCellularGatewaySettingsDhcp other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  DhcpLeaseTime == other.DhcpLeaseTime ||
						  (DhcpLeaseTime != null &&
						  DhcpLeaseTime.Equals(other.DhcpLeaseTime))
					 ) &&
					 (
						  DnsNameservers == other.DnsNameservers ||
						  (DnsNameservers != null &&
						  DnsNameservers.Equals(other.DnsNameservers))
					 ) &&
					 (
						  DnsCustomNameservers == other.DnsCustomNameservers ||
						  (DnsCustomNameservers != null &&
						  DnsCustomNameservers.SequenceEqual(other.DnsCustomNameservers))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (DhcpLeaseTime != null)
				{
					hash = (hash * 59) + DhcpLeaseTime.GetHashCode();
				}

				if (DnsNameservers != null)
				{
					hash = (hash * 59) + DnsNameservers.GetHashCode();
				}

				if (DnsCustomNameservers != null)
				{
					hash = (hash * 59) + DnsCustomNameservers.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
