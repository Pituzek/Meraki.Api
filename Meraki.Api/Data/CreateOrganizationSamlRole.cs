/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// CreateOrganizationSamlRole
	/// </summary>
	[DataContract]
    public partial class CreateOrganizationSamlRole :  IEquatable<CreateOrganizationSamlRole>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrganizationSamlRole" /> class.
        /// </summary>
        /// <param name="Role">The role of the SAML administrator.</param>
        /// <param name="OrgAccess">The privilege of the SAML administrator on the organization.</param>
        /// <param name="Tags">The list of tags that the SAML administrator has privleges on.</param>
        /// <param name="Networks">The list of networks that the SAML administrator has privileges on.</param>
        public CreateOrganizationSamlRole(string Role = default, string OrgAccess = default, List<Tag2> Tags = default, List<Network2> Networks = default)
        {
            this.Role = Role;
            this.OrgAccess = OrgAccess;
            this.Tags = Tags;
            this.Networks = Networks;
        }

        /// <summary>
        /// The role of the SAML administrator
        /// </summary>
        /// <value>The role of the SAML administrator</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }
        /// <summary>
        /// The privilege of the SAML administrator on the organization
        /// </summary>
        /// <value>The privilege of the SAML administrator on the organization</value>
        [DataMember(Name="orgAccess", EmitDefaultValue=false)]
        public string OrgAccess { get; set; }
        /// <summary>
        /// The list of tags that the SAML administrator has privleges on
        /// </summary>
        /// <value>The list of tags that the SAML administrator has privleges on</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<Tag2> Tags { get; set; }
        /// <summary>
        /// The list of networks that the SAML administrator has privileges on
        /// </summary>
        /// <value>The list of networks that the SAML administrator has privileges on</value>
        [DataMember(Name="networks", EmitDefaultValue=false)]
        public List<Network2> Networks { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrganizationSamlRole {\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  OrgAccess: ").Append(OrgAccess).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as CreateOrganizationSamlRole);
        }

        /// <summary>
        /// Returns true if CreateOrganizationSamlRole instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateOrganizationSamlRole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrganizationSamlRole other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Role == other.Role ||
						  Role != null &&
						  Role.Equals(other.Role)
					 ) &&
					 (
						  OrgAccess == other.OrgAccess ||
						  OrgAccess != null &&
						  OrgAccess.Equals(other.OrgAccess)
					 ) &&
					 (
						  Tags == other.Tags ||
						  Tags != null &&
						  Tags.SequenceEqual(other.Tags)
					 ) &&
					 (
						  Networks == other.Networks ||
						  Networks != null &&
						  Networks.SequenceEqual(other.Networks)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Role != null)
                    hash = hash * 59 + Role.GetHashCode();
                if (OrgAccess != null)
                    hash = hash * 59 + OrgAccess.GetHashCode();
                if (Tags != null)
                    hash = hash * 59 + Tags.GetHashCode();
                if (Networks != null)
                    hash = hash * 59 + Networks.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
