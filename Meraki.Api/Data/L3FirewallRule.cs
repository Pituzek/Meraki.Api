/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// L3FirewallRule
	/// </summary>
	[DataContract]
    public partial class L3FirewallRule :  IEquatable<L3FirewallRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="L3FirewallRule" /> class.
        /// </summary>
        [JsonConstructor]
        protected L3FirewallRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="L3FirewallRule" /> class.
        /// </summary>
        /// <param name="Comment">Description of the rule (optional).</param>
        /// <param name="Policy">&#39;allow&#39; or &#39;deny&#39; traffic specified by this rule (required).</param>
        /// <param name="Protocol">The type of protocol (must be &#39;tcp&#39;, &#39;udp&#39;, &#39;icmp&#39; or &#39;any&#39;) (required).</param>
        /// <param name="DestPort">Destination port (integer in the range 1-65535), a port range (e.g. 8080-9090), or &#39;any&#39;.</param>
        /// <param name="DestCidr">Destination IP address (in IP or CIDR notation), a fully-qualified domain name (FQDN, if your network supports it) or &#39;any&#39;. (required).</param>
        public L3FirewallRule(string Comment = default, string Policy = default, string Protocol = default, string DestPort = default, string DestCidr = default)
        {
            // to ensure "Policy" is required (not null)
            if (Policy == null)
            {
                throw new InvalidDataException("Policy is a required property for L3FirewallRule and cannot be null");
            }
            else
            {
                this.Policy = Policy;
            }
            // to ensure "Protocol" is required (not null)
            if (Protocol == null)
            {
                throw new InvalidDataException("Protocol is a required property for L3FirewallRule and cannot be null");
            }
            else
            {
                this.Protocol = Protocol;
            }
            // to ensure "DestCidr" is required (not null)
            if (DestCidr == null)
            {
                throw new InvalidDataException("DestCidr is a required property for L3FirewallRule and cannot be null");
            }
            else
            {
                this.DestCidr = DestCidr;
            }
            this.Comment = Comment;
            this.DestPort = DestPort;
        }

        /// <summary>
        /// Description of the rule (optional)
        /// </summary>
        /// <value>Description of the rule (optional)</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }
        /// <summary>
        /// &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule
        /// </summary>
        /// <value>&#39;allow&#39; or &#39;deny&#39; traffic specified by this rule</value>
        [DataMember(Name="policy", EmitDefaultValue=false)]
        public string Policy { get; set; }
        /// <summary>
        /// The type of protocol (must be &#39;tcp&#39;, &#39;udp&#39;, &#39;icmp&#39; or &#39;any&#39;)
        /// </summary>
        /// <value>The type of protocol (must be &#39;tcp&#39;, &#39;udp&#39;, &#39;icmp&#39; or &#39;any&#39;)</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }
        /// <summary>
        /// Destination port (integer in the range 1-65535), a port range (e.g. 8080-9090), or &#39;any&#39;
        /// </summary>
        /// <value>Destination port (integer in the range 1-65535), a port range (e.g. 8080-9090), or &#39;any&#39;</value>
        [DataMember(Name="destPort", EmitDefaultValue=false)]
        public string DestPort { get; set; }
        /// <summary>
        /// Destination IP address (in IP or CIDR notation), a fully-qualified domain name (FQDN, if your network supports it) or &#39;any&#39;.
        /// </summary>
        /// <value>Destination IP address (in IP or CIDR notation), a fully-qualified domain name (FQDN, if your network supports it) or &#39;any&#39;.</value>
        [DataMember(Name="destCidr", EmitDefaultValue=false)]
        public string DestCidr { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class L3FirewallRule {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  DestPort: ").Append(DestPort).Append("\n");
            sb.Append("  DestCidr: ").Append(DestCidr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as L3FirewallRule);
        }

        /// <summary>
        /// Returns true if L3FirewallRule instances are equal
        /// </summary>
        /// <param name="other">Instance of L3FirewallRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(L3FirewallRule other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Comment == other.Comment ||
						  Comment != null &&
						  Comment.Equals(other.Comment)
					 ) &&
					 (
						  Policy == other.Policy ||
						  Policy != null &&
						  Policy.Equals(other.Policy)
					 ) &&
					 (
						  Protocol == other.Protocol ||
						  Protocol != null &&
						  Protocol.Equals(other.Protocol)
					 ) &&
					 (
						  DestPort == other.DestPort ||
						  DestPort != null &&
						  DestPort.Equals(other.DestPort)
					 ) &&
					 (
						  DestCidr == other.DestCidr ||
						  DestCidr != null &&
						  DestCidr.Equals(other.DestCidr)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Comment != null)
                    hash = hash * 59 + Comment.GetHashCode();
                if (Policy != null)
                    hash = hash * 59 + Policy.GetHashCode();
                if (Protocol != null)
                    hash = hash * 59 + Protocol.GetHashCode();
                if (DestPort != null)
                    hash = hash * 59 + DestPort.GetHashCode();
                if (DestCidr != null)
                    hash = hash * 59 + DestCidr.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
