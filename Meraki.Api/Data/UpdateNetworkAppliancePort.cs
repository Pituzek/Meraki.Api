/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkAppliancePort
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkAppliancePort :  IEquatable<UpdateNetworkAppliancePort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkAppliancePort" /> class.
        /// </summary>
        /// <param name="Enabled">The status of the port.</param>
        /// <param name="DropUntaggedTraffic">Trunk port can Drop all Untagged traffic. When true, no VLAN is required. Access ports cannot have dropUntaggedTraffic set to true..</param>
        /// <param name="Type">The type of the port: &#39;access&#39; or &#39;trunk&#39;..</param>
        /// <param name="Vlan">Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode..</param>
        /// <param name="AllowedVlans">Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port..</param>
        /// <param name="AccessPolicy">The name of the policy. Only applicable to Access ports. Valid values are: &#39;open&#39;, &#39;8021x-radius&#39;, &#39;mac-radius&#39;, &#39;hybris-radius&#39; for MX64 or Z3 or any MX supporting the per port authentication feature. Otherwise, &#39;open&#39; is the only valid value and &#39;open&#39; is the default value if the field is missing..</param>
        public UpdateNetworkAppliancePort(bool? Enabled = default, bool? DropUntaggedTraffic = default, string Type = default, int? Vlan = default, string AllowedVlans = default, string AccessPolicy = default)
        {
            this.Enabled = Enabled;
            this.DropUntaggedTraffic = DropUntaggedTraffic;
            this.Type = Type;
            this.Vlan = Vlan;
            this.AllowedVlans = AllowedVlans;
            this.AccessPolicy = AccessPolicy;
        }

        /// <summary>
        /// The status of the port
        /// </summary>
        /// <value>The status of the port</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Trunk port can Drop all Untagged traffic. When true, no VLAN is required. Access ports cannot have dropUntaggedTraffic set to true.
        /// </summary>
        /// <value>Trunk port can Drop all Untagged traffic. When true, no VLAN is required. Access ports cannot have dropUntaggedTraffic set to true.</value>
        [DataMember(Name="dropUntaggedTraffic", EmitDefaultValue=false)]
        public bool? DropUntaggedTraffic { get; set; }
        /// <summary>
        /// The type of the port: &#39;access&#39; or &#39;trunk&#39;.
        /// </summary>
        /// <value>The type of the port: &#39;access&#39; or &#39;trunk&#39;.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
        /// </summary>
        /// <value>Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.</value>
        [DataMember(Name="vlan", EmitDefaultValue=false)]
        public int? Vlan { get; set; }
        /// <summary>
        /// Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port.
        /// </summary>
        /// <value>Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port.</value>
        [DataMember(Name="allowedVlans", EmitDefaultValue=false)]
        public string AllowedVlans { get; set; }
        /// <summary>
        /// The name of the policy. Only applicable to Access ports. Valid values are: &#39;open&#39;, &#39;8021x-radius&#39;, &#39;mac-radius&#39;, &#39;hybris-radius&#39; for MX64 or Z3 or any MX supporting the per port authentication feature. Otherwise, &#39;open&#39; is the only valid value and &#39;open&#39; is the default value if the field is missing.
        /// </summary>
        /// <value>The name of the policy. Only applicable to Access ports. Valid values are: &#39;open&#39;, &#39;8021x-radius&#39;, &#39;mac-radius&#39;, &#39;hybris-radius&#39; for MX64 or Z3 or any MX supporting the per port authentication feature. Otherwise, &#39;open&#39; is the only valid value and &#39;open&#39; is the default value if the field is missing.</value>
        [DataMember(Name="accessPolicy", EmitDefaultValue=false)]
        public string AccessPolicy { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkAppliancePort {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  DropUntaggedTraffic: ").Append(DropUntaggedTraffic).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Vlan: ").Append(Vlan).Append("\n");
            sb.Append("  AllowedVlans: ").Append(AllowedVlans).Append("\n");
            sb.Append("  AccessPolicy: ").Append(AccessPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkAppliancePort);
        }

        /// <summary>
        /// Returns true if UpdateNetworkAppliancePort instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkAppliancePort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkAppliancePort other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Enabled == other.Enabled ||
						  (Enabled != null &&
						  Enabled.Equals(other.Enabled))
					 ) &&
					 (
						  DropUntaggedTraffic == other.DropUntaggedTraffic ||
						  (DropUntaggedTraffic != null &&
						  DropUntaggedTraffic.Equals(other.DropUntaggedTraffic))
					 ) &&
					 (
						  Type == other.Type ||
						  (Type != null &&
						  Type.Equals(other.Type))
					 ) &&
					 (
						  Vlan == other.Vlan ||
						  (Vlan != null &&
						  Vlan.Equals(other.Vlan))
					 ) &&
					 (
						  AllowedVlans == other.AllowedVlans ||
						  (AllowedVlans != null &&
						  AllowedVlans.Equals(other.AllowedVlans))
					 ) &&
					 (
						  AccessPolicy == other.AccessPolicy ||
						  (AccessPolicy != null &&
						  AccessPolicy.Equals(other.AccessPolicy))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Enabled != null)
				{
					hash = (hash * 59) + Enabled.GetHashCode();
				}

				if (DropUntaggedTraffic != null)
				{
					hash = (hash * 59) + DropUntaggedTraffic.GetHashCode();
				}

				if (Type != null)
				{
					hash = (hash * 59) + Type.GetHashCode();
				}

				if (Vlan != null)
				{
					hash = (hash * 59) + Vlan.GetHashCode();
				}

				if (AllowedVlans != null)
				{
					hash = (hash * 59) + AllowedVlans.GetHashCode();
				}

				if (AccessPolicy != null)
				{
					hash = (hash * 59) + AccessPolicy.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
