/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkCameraQualityRetentionProfile
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkCameraQualityRetentionProfile :  IEquatable<UpdateNetworkCameraQualityRetentionProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkCameraQualityRetentionProfile" /> class.
        /// </summary>
        /// <param name="Name">The name of the new profile. Must be unique..</param>
        /// <param name="MotionBasedRetentionEnabled">Deletes footage older than 3 days in which no motion was detected. Can be either true or false. Defaults to false..</param>
        /// <param name="RestrictedBandwidthModeEnabled">Disable features that require additional bandwidth such as Motion Recap. Can be either true or false. Defaults to false..</param>
        /// <param name="AudioRecordingEnabled">Whether or not to record audio. Can be either true or false. Defaults to false..</param>
        /// <param name="CloudArchiveEnabled">Create redundant video backup using Cloud Archive. Can be either true or false. Defaults to false..</param>
        /// <param name="MotionDetectorVersion">The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2..</param>
        /// <param name="ScheduleId">Schedule for which this camera will record video, or &#39;null&#39; to always record..</param>
        /// <param name="MaxRetentionDays">The maximum number of days for which the data will be stored, or &#39;null&#39; to keep data until storage space runs out. If the former, it can be one of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 30, 60, 90] days.</param>
        /// <param name="VideoSettings">VideoSettings.</param>
        public UpdateNetworkCameraQualityRetentionProfile(string Name = default, bool? MotionBasedRetentionEnabled = default, bool? RestrictedBandwidthModeEnabled = default, bool? AudioRecordingEnabled = default, bool? CloudArchiveEnabled = default, int? MotionDetectorVersion = default, string ScheduleId = default, int? MaxRetentionDays = default, VideoSettings VideoSettings = default)
        {
            this.Name = Name;
            this.MotionBasedRetentionEnabled = MotionBasedRetentionEnabled;
            this.RestrictedBandwidthModeEnabled = RestrictedBandwidthModeEnabled;
            this.AudioRecordingEnabled = AudioRecordingEnabled;
            this.CloudArchiveEnabled = CloudArchiveEnabled;
            this.MotionDetectorVersion = MotionDetectorVersion;
            this.ScheduleId = ScheduleId;
            this.MaxRetentionDays = MaxRetentionDays;
            this.VideoSettings = VideoSettings;
        }

        /// <summary>
        /// The name of the new profile. Must be unique.
        /// </summary>
        /// <value>The name of the new profile. Must be unique.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Deletes footage older than 3 days in which no motion was detected. Can be either true or false. Defaults to false.
        /// </summary>
        /// <value>Deletes footage older than 3 days in which no motion was detected. Can be either true or false. Defaults to false.</value>
        [DataMember(Name="motionBasedRetentionEnabled", EmitDefaultValue=false)]
        public bool? MotionBasedRetentionEnabled { get; set; }
        /// <summary>
        /// Disable features that require additional bandwidth such as Motion Recap. Can be either true or false. Defaults to false.
        /// </summary>
        /// <value>Disable features that require additional bandwidth such as Motion Recap. Can be either true or false. Defaults to false.</value>
        [DataMember(Name="restrictedBandwidthModeEnabled", EmitDefaultValue=false)]
        public bool? RestrictedBandwidthModeEnabled { get; set; }
        /// <summary>
        /// Whether or not to record audio. Can be either true or false. Defaults to false.
        /// </summary>
        /// <value>Whether or not to record audio. Can be either true or false. Defaults to false.</value>
        [DataMember(Name="audioRecordingEnabled", EmitDefaultValue=false)]
        public bool? AudioRecordingEnabled { get; set; }
        /// <summary>
        /// Create redundant video backup using Cloud Archive. Can be either true or false. Defaults to false.
        /// </summary>
        /// <value>Create redundant video backup using Cloud Archive. Can be either true or false. Defaults to false.</value>
        [DataMember(Name="cloudArchiveEnabled", EmitDefaultValue=false)]
        public bool? CloudArchiveEnabled { get; set; }
        /// <summary>
        /// The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.
        /// </summary>
        /// <value>The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.</value>
        [DataMember(Name="motionDetectorVersion", EmitDefaultValue=false)]
        public int? MotionDetectorVersion { get; set; }
        /// <summary>
        /// Schedule for which this camera will record video, or &#39;null&#39; to always record.
        /// </summary>
        /// <value>Schedule for which this camera will record video, or &#39;null&#39; to always record.</value>
        [DataMember(Name="scheduleId", EmitDefaultValue=false)]
        public string ScheduleId { get; set; }
        /// <summary>
        /// The maximum number of days for which the data will be stored, or &#39;null&#39; to keep data until storage space runs out. If the former, it can be one of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 30, 60, 90] days
        /// </summary>
        /// <value>The maximum number of days for which the data will be stored, or &#39;null&#39; to keep data until storage space runs out. If the former, it can be one of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 30, 60, 90] days</value>
        [DataMember(Name="maxRetentionDays", EmitDefaultValue=false)]
        public int? MaxRetentionDays { get; set; }
        /// <summary>
        /// Gets or Sets VideoSettings
        /// </summary>
        [DataMember(Name="videoSettings", EmitDefaultValue=false)]
        public VideoSettings VideoSettings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkCameraQualityRetentionProfile {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MotionBasedRetentionEnabled: ").Append(MotionBasedRetentionEnabled).Append("\n");
            sb.Append("  RestrictedBandwidthModeEnabled: ").Append(RestrictedBandwidthModeEnabled).Append("\n");
            sb.Append("  AudioRecordingEnabled: ").Append(AudioRecordingEnabled).Append("\n");
            sb.Append("  CloudArchiveEnabled: ").Append(CloudArchiveEnabled).Append("\n");
            sb.Append("  MotionDetectorVersion: ").Append(MotionDetectorVersion).Append("\n");
            sb.Append("  ScheduleId: ").Append(ScheduleId).Append("\n");
            sb.Append("  MaxRetentionDays: ").Append(MaxRetentionDays).Append("\n");
            sb.Append("  VideoSettings: ").Append(VideoSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkCameraQualityRetentionProfile);
        }

        /// <summary>
        /// Returns true if UpdateNetworkCameraQualityRetentionProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkCameraQualityRetentionProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkCameraQualityRetentionProfile other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  Name != null &&
						  Name.Equals(other.Name)
					 ) &&
					 (
						  MotionBasedRetentionEnabled == other.MotionBasedRetentionEnabled ||
						  MotionBasedRetentionEnabled != null &&
						  MotionBasedRetentionEnabled.Equals(other.MotionBasedRetentionEnabled)
					 ) &&
					 (
						  RestrictedBandwidthModeEnabled == other.RestrictedBandwidthModeEnabled ||
						  RestrictedBandwidthModeEnabled != null &&
						  RestrictedBandwidthModeEnabled.Equals(other.RestrictedBandwidthModeEnabled)
					 ) &&
					 (
						  AudioRecordingEnabled == other.AudioRecordingEnabled ||
						  AudioRecordingEnabled != null &&
						  AudioRecordingEnabled.Equals(other.AudioRecordingEnabled)
					 ) &&
					 (
						  CloudArchiveEnabled == other.CloudArchiveEnabled ||
						  CloudArchiveEnabled != null &&
						  CloudArchiveEnabled.Equals(other.CloudArchiveEnabled)
					 ) &&
					 (
						  MotionDetectorVersion == other.MotionDetectorVersion ||
						  MotionDetectorVersion != null &&
						  MotionDetectorVersion.Equals(other.MotionDetectorVersion)
					 ) &&
					 (
						  ScheduleId == other.ScheduleId ||
						  ScheduleId != null &&
						  ScheduleId.Equals(other.ScheduleId)
					 ) &&
					 (
						  MaxRetentionDays == other.MaxRetentionDays ||
						  MaxRetentionDays != null &&
						  MaxRetentionDays.Equals(other.MaxRetentionDays)
					 ) &&
					 (
						  VideoSettings == other.VideoSettings ||
						  VideoSettings != null &&
						  VideoSettings.Equals(other.VideoSettings)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hash = hash * 59 + Name.GetHashCode();
                if (MotionBasedRetentionEnabled != null)
                    hash = hash * 59 + MotionBasedRetentionEnabled.GetHashCode();
                if (RestrictedBandwidthModeEnabled != null)
                    hash = hash * 59 + RestrictedBandwidthModeEnabled.GetHashCode();
                if (AudioRecordingEnabled != null)
                    hash = hash * 59 + AudioRecordingEnabled.GetHashCode();
                if (CloudArchiveEnabled != null)
                    hash = hash * 59 + CloudArchiveEnabled.GetHashCode();
                if (MotionDetectorVersion != null)
                    hash = hash * 59 + MotionDetectorVersion.GetHashCode();
                if (ScheduleId != null)
                    hash = hash * 59 + ScheduleId.GetHashCode();
                if (MaxRetentionDays != null)
                    hash = hash * 59 + MaxRetentionDays.GetHashCode();
                if (VideoSettings != null)
                    hash = hash * 59 + VideoSettings.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
