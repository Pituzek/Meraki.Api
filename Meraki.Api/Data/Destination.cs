/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Destination
	/// </summary>
	[DataContract]
    public partial class Destination :  IEquatable<Destination>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Destination" /> class.
        /// </summary>
        [JsonConstructor]
        protected Destination() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Destination" /> class.
        /// </summary>
        /// <param name="Ip">The IP address to test connectivity with (required).</param>
        /// <param name="Description">Description of the testing destination. Optional, defaults to null.</param>
        /// <param name="_Default">Boolean indicating whether this is the default testing destination (true) or not (false). Defaults to false. Only one default is allowed (default to false).</param>
        public Destination(string Ip = default, string Description = default, bool? _Default = false)
        {
            // to ensure "Ip" is required (not null)
            if (Ip == null)
            {
                throw new InvalidDataException("Ip is a required property for Destination and cannot be null");
            }
            else
            {
                this.Ip = Ip;
            }
            this.Description = Description;
            // use default value if no "_Default" provided
            if (_Default == null)
            {
                this._Default = false;
            }
            else
            {
                this._Default = _Default;
            }
        }

        /// <summary>
        /// The IP address to test connectivity with
        /// </summary>
        /// <value>The IP address to test connectivity with</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }
        /// <summary>
        /// Description of the testing destination. Optional, defaults to null
        /// </summary>
        /// <value>Description of the testing destination. Optional, defaults to null</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Boolean indicating whether this is the default testing destination (true) or not (false). Defaults to false. Only one default is allowed
        /// </summary>
        /// <value>Boolean indicating whether this is the default testing destination (true) or not (false). Defaults to false. Only one default is allowed</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public bool? _Default { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Destination {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Destination);
        }

        /// <summary>
        /// Returns true if Destination instances are equal
        /// </summary>
        /// <param name="other">Instance of Destination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Destination other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Ip == other.Ip ||
						  (Ip != null &&
						  Ip.Equals(other.Ip))
					 ) &&
					 (
						  Description == other.Description ||
						  (Description != null &&
						  Description.Equals(other.Description))
					 ) &&
					 (
						  _Default == other._Default ||
						  (_Default != null &&
						  _Default.Equals(other._Default))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Ip != null)
				{
					hash = (hash * 59) + Ip.GetHashCode();
				}

				if (Description != null)
				{
					hash = (hash * 59) + Description.GetHashCode();
				}

				if (_Default != null)
				{
					hash = (hash * 59) + _Default.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
