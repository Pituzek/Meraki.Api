/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// CreateNetworkFloorPlan
	/// </summary>
	[DataContract]
    public partial class CreateNetworkFloorPlan :  IEquatable<CreateNetworkFloorPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNetworkFloorPlan" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateNetworkFloorPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNetworkFloorPlan" /> class.
        /// </summary>
        /// <param name="Name">The name of your floor plan. (required).</param>
        /// <param name="Center">Center.</param>
        /// <param name="BottomLeftCorner">BottomLeftCorner.</param>
        /// <param name="BottomRightCorner">BottomRightCorner.</param>
        /// <param name="TopLeftCorner">TopLeftCorner.</param>
        /// <param name="TopRightCorner">TopRightCorner.</param>
        /// <param name="ImageContents">The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. (required).</param>
        public CreateNetworkFloorPlan(string Name = default, Center Center = default, BottomLeftCorner BottomLeftCorner = default, BottomRightCorner BottomRightCorner = default, TopLeftCorner TopLeftCorner = default, TopRightCorner TopRightCorner = default, string ImageContents = default)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateNetworkFloorPlan and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "ImageContents" is required (not null)
            if (ImageContents == null)
            {
                throw new InvalidDataException("ImageContents is a required property for CreateNetworkFloorPlan and cannot be null");
            }
            else
            {
                this.ImageContents = ImageContents;
            }
            this.Center = Center;
            this.BottomLeftCorner = BottomLeftCorner;
            this.BottomRightCorner = BottomRightCorner;
            this.TopLeftCorner = TopLeftCorner;
            this.TopRightCorner = TopRightCorner;
        }

        /// <summary>
        /// The name of your floor plan.
        /// </summary>
        /// <value>The name of your floor plan.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [DataMember(Name="center", EmitDefaultValue=false)]
        public Center Center { get; set; }
        /// <summary>
        /// Gets or Sets BottomLeftCorner
        /// </summary>
        [DataMember(Name="bottomLeftCorner", EmitDefaultValue=false)]
        public BottomLeftCorner BottomLeftCorner { get; set; }
        /// <summary>
        /// Gets or Sets BottomRightCorner
        /// </summary>
        [DataMember(Name="bottomRightCorner", EmitDefaultValue=false)]
        public BottomRightCorner BottomRightCorner { get; set; }
        /// <summary>
        /// Gets or Sets TopLeftCorner
        /// </summary>
        [DataMember(Name="topLeftCorner", EmitDefaultValue=false)]
        public TopLeftCorner TopLeftCorner { get; set; }
        /// <summary>
        /// Gets or Sets TopRightCorner
        /// </summary>
        [DataMember(Name="topRightCorner", EmitDefaultValue=false)]
        public TopRightCorner TopRightCorner { get; set; }
        /// <summary>
        /// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
        /// </summary>
        /// <value>The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.</value>
        [DataMember(Name="imageContents", EmitDefaultValue=false)]
        public string ImageContents { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateNetworkFloorPlan {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  BottomLeftCorner: ").Append(BottomLeftCorner).Append("\n");
            sb.Append("  BottomRightCorner: ").Append(BottomRightCorner).Append("\n");
            sb.Append("  TopLeftCorner: ").Append(TopLeftCorner).Append("\n");
            sb.Append("  TopRightCorner: ").Append(TopRightCorner).Append("\n");
            sb.Append("  ImageContents: ").Append(ImageContents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as CreateNetworkFloorPlan);
        }

        /// <summary>
        /// Returns true if CreateNetworkFloorPlan instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateNetworkFloorPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateNetworkFloorPlan other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  Name != null &&
						  Name.Equals(other.Name)
					 ) &&
					 (
						  Center == other.Center ||
						  Center != null &&
						  Center.Equals(other.Center)
					 ) &&
					 (
						  BottomLeftCorner == other.BottomLeftCorner ||
						  BottomLeftCorner != null &&
						  BottomLeftCorner.Equals(other.BottomLeftCorner)
					 ) &&
					 (
						  BottomRightCorner == other.BottomRightCorner ||
						  BottomRightCorner != null &&
						  BottomRightCorner.Equals(other.BottomRightCorner)
					 ) &&
					 (
						  TopLeftCorner == other.TopLeftCorner ||
						  TopLeftCorner != null &&
						  TopLeftCorner.Equals(other.TopLeftCorner)
					 ) &&
					 (
						  TopRightCorner == other.TopRightCorner ||
						  TopRightCorner != null &&
						  TopRightCorner.Equals(other.TopRightCorner)
					 ) &&
					 (
						  ImageContents == other.ImageContents ||
						  ImageContents != null &&
						  ImageContents.Equals(other.ImageContents)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hash = hash * 59 + Name.GetHashCode();
                if (Center != null)
                    hash = hash * 59 + Center.GetHashCode();
                if (BottomLeftCorner != null)
                    hash = hash * 59 + BottomLeftCorner.GetHashCode();
                if (BottomRightCorner != null)
                    hash = hash * 59 + BottomRightCorner.GetHashCode();
                if (TopLeftCorner != null)
                    hash = hash * 59 + TopLeftCorner.GetHashCode();
                if (TopRightCorner != null)
                    hash = hash * 59 + TopRightCorner.GetHashCode();
                if (ImageContents != null)
                    hash = hash * 59 + ImageContents.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
