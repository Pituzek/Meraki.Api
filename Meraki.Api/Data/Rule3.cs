/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Rule3
	/// </summary>
	[DataContract]
    public partial class Rule3 :  IEquatable<Rule3>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule3" /> class.
        /// </summary>
        [JsonConstructor]
        protected Rule3() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule3" /> class.
        /// </summary>
        /// <param name="Description">A description for your Bonjour forwarding rule. Optional..</param>
        /// <param name="VlanId">The ID of the service VLAN. Required. (required).</param>
        /// <param name="Services">A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39; (required).</param>
        public Rule3(string Description = default, string VlanId = default, List<Service> Services = default)
        {
            // to ensure "VlanId" is required (not null)
            if (VlanId == null)
            {
                throw new InvalidDataException("VlanId is a required property for Rule3 and cannot be null");
            }
            else
            {
                this.VlanId = VlanId;
            }
            // to ensure "Services" is required (not null)
            if (Services == null)
            {
                throw new InvalidDataException("Services is a required property for Rule3 and cannot be null");
            }
            else
            {
                this.Services = Services;
            }
            this.Description = Description;
        }

        /// <summary>
        /// A description for your Bonjour forwarding rule. Optional.
        /// </summary>
        /// <value>A description for your Bonjour forwarding rule. Optional.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The ID of the service VLAN. Required.
        /// </summary>
        /// <value>The ID of the service VLAN. Required.</value>
        [DataMember(Name="vlanId", EmitDefaultValue=false)]
        public string VlanId { get; set; }
        /// <summary>
        /// A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39;
        /// </summary>
        /// <value>A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39;</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<Service> Services { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rule3 {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  VlanId: ").Append(VlanId).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Rule3);
        }

        /// <summary>
        /// Returns true if Rule3 instances are equal
        /// </summary>
        /// <param name="other">Instance of Rule3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rule3 other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Description == other.Description ||
						  Description != null &&
						  Description.Equals(other.Description)
					 ) &&
					 (
						  VlanId == other.VlanId ||
						  VlanId != null &&
						  VlanId.Equals(other.VlanId)
					 ) &&
					 (
						  Services == other.Services ||
						  Services != null &&
						  Services.SequenceEqual(other.Services)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Description != null)
                    hash = hash * 59 + Description.GetHashCode();
                if (VlanId != null)
                    hash = hash * 59 + VlanId.GetHashCode();
                if (Services != null)
                    hash = hash * 59 + Services.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
