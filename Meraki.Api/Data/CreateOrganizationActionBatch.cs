/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// CreateOrganizationActionBatch
	/// </summary>
	[DataContract]
    public partial class CreateOrganizationActionBatch :  IEquatable<CreateOrganizationActionBatch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrganizationActionBatch" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateOrganizationActionBatch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrganizationActionBatch" /> class.
        /// </summary>
        /// <param name="Confirmed">Set to true for immediate execution. Set to false if the action should be previewed before executing. This property cannot be unset once it is true. Defaults to false..</param>
        /// <param name="Synchronous">Set to true to force the batch to run synchronous. There can be at most 20 actions in synchronous batch. Defaults to false..</param>
        /// <param name="Actions">A set of changes to make as part of this action (&lt;a href&#x3D;&#39;https://developer.cisco.com/meraki/api/#/rest/guides/action-batches/&#39;&gt;more details&lt;/a&gt;) (required).</param>
        public CreateOrganizationActionBatch(bool? Confirmed = default, bool? Synchronous = default, List<Action> Actions = default)
        {
            // to ensure "Actions" is required (not null)
            if (Actions == null)
            {
                throw new InvalidDataException("Actions is a required property for CreateOrganizationActionBatch and cannot be null");
            }
            else
            {
                this.Actions = Actions;
            }
            this.Confirmed = Confirmed;
            this.Synchronous = Synchronous;
        }

        /// <summary>
        /// Set to true for immediate execution. Set to false if the action should be previewed before executing. This property cannot be unset once it is true. Defaults to false.
        /// </summary>
        /// <value>Set to true for immediate execution. Set to false if the action should be previewed before executing. This property cannot be unset once it is true. Defaults to false.</value>
        [DataMember(Name="confirmed", EmitDefaultValue=false)]
        public bool? Confirmed { get; set; }
        /// <summary>
        /// Set to true to force the batch to run synchronous. There can be at most 20 actions in synchronous batch. Defaults to false.
        /// </summary>
        /// <value>Set to true to force the batch to run synchronous. There can be at most 20 actions in synchronous batch. Defaults to false.</value>
        [DataMember(Name="synchronous", EmitDefaultValue=false)]
        public bool? Synchronous { get; set; }
        /// <summary>
        /// A set of changes to make as part of this action (&lt;a href&#x3D;&#39;https://developer.cisco.com/meraki/api/#/rest/guides/action-batches/&#39;&gt;more details&lt;/a&gt;)
        /// </summary>
        /// <value>A set of changes to make as part of this action (&lt;a href&#x3D;&#39;https://developer.cisco.com/meraki/api/#/rest/guides/action-batches/&#39;&gt;more details&lt;/a&gt;)</value>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<Action> Actions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrganizationActionBatch {\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  Synchronous: ").Append(Synchronous).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as CreateOrganizationActionBatch);
        }

        /// <summary>
        /// Returns true if CreateOrganizationActionBatch instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateOrganizationActionBatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrganizationActionBatch other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Confirmed == other.Confirmed ||
						  Confirmed != null &&
						  Confirmed.Equals(other.Confirmed)
					 ) &&
					 (
						  Synchronous == other.Synchronous ||
						  Synchronous != null &&
						  Synchronous.Equals(other.Synchronous)
					 ) &&
					 (
						  Actions == other.Actions ||
						  Actions != null &&
						  Actions.SequenceEqual(other.Actions)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Confirmed != null)
                    hash = hash * 59 + Confirmed.GetHashCode();
                if (Synchronous != null)
                    hash = hash * 59 + Synchronous.GetHashCode();
                if (Actions != null)
                    hash = hash * 59 + Actions.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
