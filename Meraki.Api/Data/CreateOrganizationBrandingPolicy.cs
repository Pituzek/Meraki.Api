/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// CreateOrganizationBrandingPolicy
	/// </summary>
	[DataContract]
    public partial class CreateOrganizationBrandingPolicy :  IEquatable<CreateOrganizationBrandingPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrganizationBrandingPolicy" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateOrganizationBrandingPolicy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrganizationBrandingPolicy" /> class.
        /// </summary>
        /// <param name="Name">Name of the Dashboard branding policy. (required).</param>
        /// <param name="Enabled">Boolean indicating whether this policy is enabled. (required).</param>
        /// <param name="AdminSettings">AdminSettings (required).</param>
        /// <param name="HelpSettings">HelpSettings.</param>
        public CreateOrganizationBrandingPolicy(string Name = default, bool? Enabled = default, AdminSettings AdminSettings = default, HelpSettings HelpSettings = default)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateOrganizationBrandingPolicy and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Enabled" is required (not null)
            if (Enabled == null)
            {
                throw new InvalidDataException("Enabled is a required property for CreateOrganizationBrandingPolicy and cannot be null");
            }
            else
            {
                this.Enabled = Enabled;
            }
            // to ensure "AdminSettings" is required (not null)
            if (AdminSettings == null)
            {
                throw new InvalidDataException("AdminSettings is a required property for CreateOrganizationBrandingPolicy and cannot be null");
            }
            else
            {
                this.AdminSettings = AdminSettings;
            }
            this.HelpSettings = HelpSettings;
        }

        /// <summary>
        /// Name of the Dashboard branding policy.
        /// </summary>
        /// <value>Name of the Dashboard branding policy.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Boolean indicating whether this policy is enabled.
        /// </summary>
        /// <value>Boolean indicating whether this policy is enabled.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Gets or Sets AdminSettings
        /// </summary>
        [DataMember(Name="adminSettings", EmitDefaultValue=false)]
        public AdminSettings AdminSettings { get; set; }
        /// <summary>
        /// Gets or Sets HelpSettings
        /// </summary>
        [DataMember(Name="helpSettings", EmitDefaultValue=false)]
        public HelpSettings HelpSettings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrganizationBrandingPolicy {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  AdminSettings: ").Append(AdminSettings).Append("\n");
            sb.Append("  HelpSettings: ").Append(HelpSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as CreateOrganizationBrandingPolicy);
        }

        /// <summary>
        /// Returns true if CreateOrganizationBrandingPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateOrganizationBrandingPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrganizationBrandingPolicy other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  Name != null &&
						  Name.Equals(other.Name)
					 ) &&
					 (
						  Enabled == other.Enabled ||
						  Enabled != null &&
						  Enabled.Equals(other.Enabled)
					 ) &&
					 (
						  AdminSettings == other.AdminSettings ||
						  AdminSettings != null &&
						  AdminSettings.Equals(other.AdminSettings)
					 ) &&
					 (
						  HelpSettings == other.HelpSettings ||
						  HelpSettings != null &&
						  HelpSettings.Equals(other.HelpSettings)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hash = hash * 59 + Name.GetHashCode();
                if (Enabled != null)
                    hash = hash * 59 + Enabled.GetHashCode();
                if (AdminSettings != null)
                    hash = hash * 59 + AdminSettings.GetHashCode();
                if (HelpSettings != null)
                    hash = hash * 59 + HelpSettings.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
