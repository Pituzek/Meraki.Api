/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// A mapping of uplinks to their bandwidth settings (be sure to check which uplinks are supported for your network)
	/// </summary>
	[DataContract]
    public partial class BandwidthLimits7 :  IEquatable<BandwidthLimits7>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BandwidthLimits7" /> class.
        /// </summary>
        /// <param name="Wan1">Wan1.</param>
        /// <param name="Wan2">Wan2.</param>
        /// <param name="Cellular">Cellular.</param>
        public BandwidthLimits7(Wan11 Wan1 = default, Wan21 Wan2 = default, Cellular Cellular = default)
        {
            this.Wan1 = Wan1;
            this.Wan2 = Wan2;
            this.Cellular = Cellular;
        }

        /// <summary>
        /// Gets or Sets Wan1
        /// </summary>
        [DataMember(Name="wan1", EmitDefaultValue=false)]
        public Wan11 Wan1 { get; set; }
        /// <summary>
        /// Gets or Sets Wan2
        /// </summary>
        [DataMember(Name="wan2", EmitDefaultValue=false)]
        public Wan21 Wan2 { get; set; }
        /// <summary>
        /// Gets or Sets Cellular
        /// </summary>
        [DataMember(Name="cellular", EmitDefaultValue=false)]
        public Cellular Cellular { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BandwidthLimits7 {\n");
            sb.Append("  Wan1: ").Append(Wan1).Append("\n");
            sb.Append("  Wan2: ").Append(Wan2).Append("\n");
            sb.Append("  Cellular: ").Append(Cellular).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as BandwidthLimits7);
        }

        /// <summary>
        /// Returns true if BandwidthLimits7 instances are equal
        /// </summary>
        /// <param name="other">Instance of BandwidthLimits7 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BandwidthLimits7 other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Wan1 == other.Wan1 ||
						  Wan1 != null &&
						  Wan1.Equals(other.Wan1)
					 ) &&
					 (
						  Wan2 == other.Wan2 ||
						  Wan2 != null &&
						  Wan2.Equals(other.Wan2)
					 ) &&
					 (
						  Cellular == other.Cellular ||
						  Cellular != null &&
						  Cellular.Equals(other.Cellular)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Wan1 != null)
                    hash = hash * 59 + Wan1.GetHashCode();
                if (Wan2 != null)
                    hash = hash * 59 + Wan2.GetHashCode();
                if (Cellular != null)
                    hash = hash * 59 + Cellular.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
