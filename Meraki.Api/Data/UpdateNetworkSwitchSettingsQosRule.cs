/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkSwitchSettingsQosRule
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkSwitchSettingsQosRule :  IEquatable<UpdateNetworkSwitchSettingsQosRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkSwitchSettingsQosRule" /> class.
        /// </summary>
        /// <param name="Vlan">The VLAN of the incoming packet. A null value will match any VLAN..</param>
        /// <param name="Protocol">Protocol.</param>
        /// <param name="SrcPort">The source port of the incoming packet. Applicable only if protocol is TCP or UDP..</param>
        /// <param name="SrcPortRange">The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80.</param>
        /// <param name="DstPort">The destination port of the incoming packet. Applicable only if protocol is TCP or UDP..</param>
        /// <param name="DstPortRange">The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80.</param>
        /// <param name="Dscp">DSCP tag that should be assigned to incoming packet. Set this to -1 to trust incoming DSCP. Default value is 0..</param>
        public UpdateNetworkSwitchSettingsQosRule(int? Vlan = default, Protocol9 Protocol = default, int? SrcPort = default, string SrcPortRange = default, int? DstPort = default, string DstPortRange = default, int? Dscp = default)
        {
            this.Vlan = Vlan;
            this.Protocol = Protocol;
            this.SrcPort = SrcPort;
            this.SrcPortRange = SrcPortRange;
            this.DstPort = DstPort;
            this.DstPortRange = DstPortRange;
            this.Dscp = Dscp;
        }

        /// <summary>
        /// The VLAN of the incoming packet. A null value will match any VLAN.
        /// </summary>
        /// <value>The VLAN of the incoming packet. A null value will match any VLAN.</value>
        [DataMember(Name="vlan", EmitDefaultValue=false)]
        public int? Vlan { get; set; }
        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public Protocol9 Protocol { get; set; }
        /// <summary>
        /// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
        /// </summary>
        /// <value>The source port of the incoming packet. Applicable only if protocol is TCP or UDP.</value>
        [DataMember(Name="srcPort", EmitDefaultValue=false)]
        public int? SrcPort { get; set; }
        /// <summary>
        /// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
        /// </summary>
        /// <value>The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80</value>
        [DataMember(Name="srcPortRange", EmitDefaultValue=false)]
        public string SrcPortRange { get; set; }
        /// <summary>
        /// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
        /// </summary>
        /// <value>The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.</value>
        [DataMember(Name="dstPort", EmitDefaultValue=false)]
        public int? DstPort { get; set; }
        /// <summary>
        /// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
        /// </summary>
        /// <value>The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80</value>
        [DataMember(Name="dstPortRange", EmitDefaultValue=false)]
        public string DstPortRange { get; set; }
        /// <summary>
        /// DSCP tag that should be assigned to incoming packet. Set this to -1 to trust incoming DSCP. Default value is 0.
        /// </summary>
        /// <value>DSCP tag that should be assigned to incoming packet. Set this to -1 to trust incoming DSCP. Default value is 0.</value>
        [DataMember(Name="dscp", EmitDefaultValue=false)]
        public int? Dscp { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkSwitchSettingsQosRule {\n");
            sb.Append("  Vlan: ").Append(Vlan).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  SrcPort: ").Append(SrcPort).Append("\n");
            sb.Append("  SrcPortRange: ").Append(SrcPortRange).Append("\n");
            sb.Append("  DstPort: ").Append(DstPort).Append("\n");
            sb.Append("  DstPortRange: ").Append(DstPortRange).Append("\n");
            sb.Append("  Dscp: ").Append(Dscp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkSwitchSettingsQosRule);
        }

        /// <summary>
        /// Returns true if UpdateNetworkSwitchSettingsQosRule instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkSwitchSettingsQosRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkSwitchSettingsQosRule other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Vlan == other.Vlan ||
						  Vlan != null &&
						  Vlan.Equals(other.Vlan)
					 ) &&
					 (
						  Protocol == other.Protocol ||
						  Protocol != null &&
						  Protocol.Equals(other.Protocol)
					 ) &&
					 (
						  SrcPort == other.SrcPort ||
						  SrcPort != null &&
						  SrcPort.Equals(other.SrcPort)
					 ) &&
					 (
						  SrcPortRange == other.SrcPortRange ||
						  SrcPortRange != null &&
						  SrcPortRange.Equals(other.SrcPortRange)
					 ) &&
					 (
						  DstPort == other.DstPort ||
						  DstPort != null &&
						  DstPort.Equals(other.DstPort)
					 ) &&
					 (
						  DstPortRange == other.DstPortRange ||
						  DstPortRange != null &&
						  DstPortRange.Equals(other.DstPortRange)
					 ) &&
					 (
						  Dscp == other.Dscp ||
						  Dscp != null &&
						  Dscp.Equals(other.Dscp)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Vlan != null)
                    hash = hash * 59 + Vlan.GetHashCode();
                if (Protocol != null)
                    hash = hash * 59 + Protocol.GetHashCode();
                if (SrcPort != null)
                    hash = hash * 59 + SrcPort.GetHashCode();
                if (SrcPortRange != null)
                    hash = hash * 59 + SrcPortRange.GetHashCode();
                if (DstPort != null)
                    hash = hash * 59 + DstPort.GetHashCode();
                if (DstPortRange != null)
                    hash = hash * 59 + DstPortRange.GetHashCode();
                if (Dscp != null)
                    hash = hash * 59 + Dscp.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
