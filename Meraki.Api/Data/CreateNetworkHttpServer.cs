/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// CreateNetworkHttpServer
	/// </summary>
	[DataContract]
    public partial class CreateNetworkHttpServer :  IEquatable<CreateNetworkHttpServer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNetworkHttpServer" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateNetworkHttpServer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNetworkHttpServer" /> class.
        /// </summary>
        /// <param name="Name">A name for easy reference to the HTTP server (required).</param>
        /// <param name="Url">The URL of the HTTP server (required).</param>
        /// <param name="SharedSecret">A shared secret that will be included in POSTs sent to the HTTP server. This secret can be used to verify that the request was sent by Meraki..</param>
        public CreateNetworkHttpServer(string Name = default, string Url = default, string SharedSecret = default)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateNetworkHttpServer and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for CreateNetworkHttpServer and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
            this.SharedSecret = SharedSecret;
        }

        /// <summary>
        /// A name for easy reference to the HTTP server
        /// </summary>
        /// <value>A name for easy reference to the HTTP server</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The URL of the HTTP server
        /// </summary>
        /// <value>The URL of the HTTP server</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// A shared secret that will be included in POSTs sent to the HTTP server. This secret can be used to verify that the request was sent by Meraki.
        /// </summary>
        /// <value>A shared secret that will be included in POSTs sent to the HTTP server. This secret can be used to verify that the request was sent by Meraki.</value>
        [DataMember(Name="sharedSecret", EmitDefaultValue=false)]
        public string SharedSecret { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateNetworkHttpServer {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  SharedSecret: ").Append(SharedSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as CreateNetworkHttpServer);
        }

        /// <summary>
        /// Returns true if CreateNetworkHttpServer instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateNetworkHttpServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateNetworkHttpServer other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  (Name != null &&
						  Name.Equals(other.Name))
					 ) &&
					 (
						  Url == other.Url ||
						  (Url != null &&
						  Url.Equals(other.Url))
					 ) &&
					 (
						  SharedSecret == other.SharedSecret ||
						  (SharedSecret != null &&
						  SharedSecret.Equals(other.SharedSecret))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
				{
					hash = (hash * 59) + Name.GetHashCode();
				}

				if (Url != null)
				{
					hash = (hash * 59) + Url.GetHashCode();
				}

				if (SharedSecret != null)
				{
					hash = (hash * 59) + SharedSecret.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
