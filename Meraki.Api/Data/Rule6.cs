/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Rule6
	/// </summary>
	[DataContract]
    public partial class Rule6 :  IEquatable<Rule6>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule6" /> class.
        /// </summary>
        /// <param name="Policy">Policy.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Value">The &#39;value&#39; of what you want to block. Format of &#39;value&#39; varies depending on type of the rule. See sample request. The application categories and application ids can be retrieved from the the &#39;MX L7 application categories&#39; endpoint. The countries follow the two-letter ISO 3166-1 alpha-2 format..</param>
        public Rule6(Policy5 Policy = default, Type5 Type = default, string Value = default)
        {
            this.Policy = Policy;
            this.Type = Type;
            this.Value = Value;
        }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name="policy", EmitDefaultValue=false)]
        public Policy5 Policy { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public Type5 Type { get; set; }
        /// <summary>
        /// The &#39;value&#39; of what you want to block. Format of &#39;value&#39; varies depending on type of the rule. See sample request. The application categories and application ids can be retrieved from the the &#39;MX L7 application categories&#39; endpoint. The countries follow the two-letter ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The &#39;value&#39; of what you want to block. Format of &#39;value&#39; varies depending on type of the rule. See sample request. The application categories and application ids can be retrieved from the the &#39;MX L7 application categories&#39; endpoint. The countries follow the two-letter ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rule6 {\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Rule6);
        }

        /// <summary>
        /// Returns true if Rule6 instances are equal
        /// </summary>
        /// <param name="other">Instance of Rule6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rule6 other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Policy == other.Policy ||
						  Policy != null &&
						  Policy.Equals(other.Policy)
					 ) &&
					 (
						  Type == other.Type ||
						  Type != null &&
						  Type.Equals(other.Type)
					 ) &&
					 (
						  Value == other.Value ||
						  Value != null &&
						  Value.Equals(other.Value)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Policy != null)
                    hash = hash * 59 + Policy.GetHashCode();
                if (Type != null)
                    hash = hash * 59 + Type.GetHashCode();
                if (Value != null)
                    hash = hash * 59 + Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
