/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// Rule
	/// </summary>
	[DataContract]
    public partial class Rule :  IEquatable<Rule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule" /> class.
        /// </summary>
        [JsonConstructor]
        protected Rule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule" /> class.
        /// </summary>
        /// <param name="Name">A descriptive name for the rule.</param>
        /// <param name="LanIp">The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN (required).</param>
        /// <param name="PublicPort">A port or port ranges that will be forwarded to the host on the LAN (required).</param>
        /// <param name="LocalPort">A port or port ranges that will receive the forwarded traffic from the WAN (required).</param>
        /// <param name="AllowedIps">An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges..</param>
        /// <param name="Protocol">TCP or UDP (required).</param>
        /// <param name="Access">&#x60;any&#x60; or &#x60;restricted&#x60;. Specify the right to make inbound connections on the specified ports or port ranges. If &#x60;restricted&#x60;, a list of allowed IPs is mandatory. (required).</param>
        public Rule(string Name = default, string LanIp = default, string PublicPort = default, string LocalPort = default, List<string> AllowedIps = default, string Protocol = default, string Access = default)
        {
            // to ensure "LanIp" is required (not null)
            if (LanIp == null)
            {
                throw new InvalidDataException("LanIp is a required property for Rule and cannot be null");
            }
            else
            {
                this.LanIp = LanIp;
            }
            // to ensure "PublicPort" is required (not null)
            if (PublicPort == null)
            {
                throw new InvalidDataException("PublicPort is a required property for Rule and cannot be null");
            }
            else
            {
                this.PublicPort = PublicPort;
            }
            // to ensure "LocalPort" is required (not null)
            if (LocalPort == null)
            {
                throw new InvalidDataException("LocalPort is a required property for Rule and cannot be null");
            }
            else
            {
                this.LocalPort = LocalPort;
            }
            // to ensure "Protocol" is required (not null)
            if (Protocol == null)
            {
                throw new InvalidDataException("Protocol is a required property for Rule and cannot be null");
            }
            else
            {
                this.Protocol = Protocol;
            }
            // to ensure "Access" is required (not null)
            if (Access == null)
            {
                throw new InvalidDataException("Access is a required property for Rule and cannot be null");
            }
            else
            {
                this.Access = Access;
            }
            this.Name = Name;
            this.AllowedIps = AllowedIps;
        }

        /// <summary>
        /// A descriptive name for the rule
        /// </summary>
        /// <value>A descriptive name for the rule</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
        /// </summary>
        /// <value>The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN</value>
        [DataMember(Name="lanIp", EmitDefaultValue=false)]
        public string LanIp { get; set; }
        /// <summary>
        /// A port or port ranges that will be forwarded to the host on the LAN
        /// </summary>
        /// <value>A port or port ranges that will be forwarded to the host on the LAN</value>
        [DataMember(Name="publicPort", EmitDefaultValue=false)]
        public string PublicPort { get; set; }
        /// <summary>
        /// A port or port ranges that will receive the forwarded traffic from the WAN
        /// </summary>
        /// <value>A port or port ranges that will receive the forwarded traffic from the WAN</value>
        [DataMember(Name="localPort", EmitDefaultValue=false)]
        public string LocalPort { get; set; }
        /// <summary>
        /// An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges.
        /// </summary>
        /// <value>An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges.</value>
        [DataMember(Name="allowedIps", EmitDefaultValue=false)]
        public List<string> AllowedIps { get; set; }
        /// <summary>
        /// TCP or UDP
        /// </summary>
        /// <value>TCP or UDP</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }
        /// <summary>
        /// &#x60;any&#x60; or &#x60;restricted&#x60;. Specify the right to make inbound connections on the specified ports or port ranges. If &#x60;restricted&#x60;, a list of allowed IPs is mandatory.
        /// </summary>
        /// <value>&#x60;any&#x60; or &#x60;restricted&#x60;. Specify the right to make inbound connections on the specified ports or port ranges. If &#x60;restricted&#x60;, a list of allowed IPs is mandatory.</value>
        [DataMember(Name="access", EmitDefaultValue=false)]
        public string Access { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rule {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LanIp: ").Append(LanIp).Append("\n");
            sb.Append("  PublicPort: ").Append(PublicPort).Append("\n");
            sb.Append("  LocalPort: ").Append(LocalPort).Append("\n");
            sb.Append("  AllowedIps: ").Append(AllowedIps).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as Rule);
        }

        /// <summary>
        /// Returns true if Rule instances are equal
        /// </summary>
        /// <param name="other">Instance of Rule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rule other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  Name == other.Name ||
						  Name != null &&
						  Name.Equals(other.Name)
					 ) &&
					 (
						  LanIp == other.LanIp ||
						  LanIp != null &&
						  LanIp.Equals(other.LanIp)
					 ) &&
					 (
						  PublicPort == other.PublicPort ||
						  PublicPort != null &&
						  PublicPort.Equals(other.PublicPort)
					 ) &&
					 (
						  LocalPort == other.LocalPort ||
						  LocalPort != null &&
						  LocalPort.Equals(other.LocalPort)
					 ) &&
					 (
						  AllowedIps == other.AllowedIps ||
						  AllowedIps != null &&
						  AllowedIps.SequenceEqual(other.AllowedIps)
					 ) &&
					 (
						  Protocol == other.Protocol ||
						  Protocol != null &&
						  Protocol.Equals(other.Protocol)
					 ) &&
					 (
						  Access == other.Access ||
						  Access != null &&
						  Access.Equals(other.Access)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hash = hash * 59 + Name.GetHashCode();
                if (LanIp != null)
                    hash = hash * 59 + LanIp.GetHashCode();
                if (PublicPort != null)
                    hash = hash * 59 + PublicPort.GetHashCode();
                if (LocalPort != null)
                    hash = hash * 59 + LocalPort.GetHashCode();
                if (AllowedIps != null)
                    hash = hash * 59 + AllowedIps.GetHashCode();
                if (Protocol != null)
                    hash = hash * 59 + Protocol.GetHashCode();
                if (Access != null)
                    hash = hash * 59 + Access.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
