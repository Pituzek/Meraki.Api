/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// WhitelistedRule
	/// </summary>
	[DataContract]
    public partial class WhitelistedRule :  IEquatable<WhitelistedRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhitelistedRule" /> class.
        /// </summary>
        [JsonConstructor]
        protected WhitelistedRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WhitelistedRule" /> class.
        /// </summary>
        /// <param name="RuleId">A rule identifier of the format meraki:intrusion/snort/GID/&lt;gid&gt;/SID/&lt;sid&gt;. gid and sid can be obtained from either https://www.snort.org/rule-docs or as ruleIds from the security events in /organization/[orgId]/securityEvents (required).</param>
        /// <param name="Message">Message is optional and is ignored on a PUT call. It is allowed in order for PUT to be compatible with GET.</param>
        public WhitelistedRule(string RuleId = default, string Message = default)
        {
            // to ensure "RuleId" is required (not null)
            if (RuleId == null)
            {
                throw new InvalidDataException("RuleId is a required property for WhitelistedRule and cannot be null");
            }
            else
            {
                this.RuleId = RuleId;
            }
            this.Message = Message;
        }

        /// <summary>
        /// A rule identifier of the format meraki:intrusion/snort/GID/&lt;gid&gt;/SID/&lt;sid&gt;. gid and sid can be obtained from either https://www.snort.org/rule-docs or as ruleIds from the security events in /organization/[orgId]/securityEvents
        /// </summary>
        /// <value>A rule identifier of the format meraki:intrusion/snort/GID/&lt;gid&gt;/SID/&lt;sid&gt;. gid and sid can be obtained from either https://www.snort.org/rule-docs or as ruleIds from the security events in /organization/[orgId]/securityEvents</value>
        [DataMember(Name="ruleId", EmitDefaultValue=false)]
        public string RuleId { get; set; }
        /// <summary>
        /// Message is optional and is ignored on a PUT call. It is allowed in order for PUT to be compatible with GET
        /// </summary>
        /// <value>Message is optional and is ignored on a PUT call. It is allowed in order for PUT to be compatible with GET</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WhitelistedRule {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as WhitelistedRule);
        }

        /// <summary>
        /// Returns true if WhitelistedRule instances are equal
        /// </summary>
        /// <param name="other">Instance of WhitelistedRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WhitelistedRule other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  RuleId == other.RuleId ||
						  RuleId != null &&
						  RuleId.Equals(other.RuleId)
					 ) &&
					 (
						  Message == other.Message ||
						  Message != null &&
						  Message.Equals(other.Message)
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (RuleId != null)
                    hash = hash * 59 + RuleId.GetHashCode();
                if (Message != null)
                    hash = hash * 59 + Message.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
