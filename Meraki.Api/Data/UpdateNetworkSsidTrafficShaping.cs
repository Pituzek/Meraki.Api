/* 
 * Meraki Dashboard API
 *
 *   *Version 0.10.0*  The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 April, 2020 > > [What's New](https://meraki.io/whats-new/)  - --  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)     
 *
 * OpenAPI spec version: 0.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Meraki.Api.Data
{
	/// <summary>
	/// UpdateNetworkSsidTrafficShaping
	/// </summary>
	[DataContract]
    public partial class UpdateNetworkSsidTrafficShaping :  IEquatable<UpdateNetworkSsidTrafficShaping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNetworkSsidTrafficShaping" /> class.
        /// </summary>
        /// <param name="TrafficShapingEnabled">Whether traffic shaping rules are applied to clients on your SSID..</param>
        /// <param name="DefaultRulesEnabled">Whether default traffic shaping rules are enabled (true) or disabled (false).     There are 4 default rules, which can     be seen on your network&#39;s traffic shaping page. Note that default rules     count against the rule limit of 8..</param>
        /// <param name="Rules">An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules..</param>
        public UpdateNetworkSsidTrafficShaping(bool? TrafficShapingEnabled = default, bool? DefaultRulesEnabled = default, List<Rule11> Rules = default)
        {
            this.TrafficShapingEnabled = TrafficShapingEnabled;
            this.DefaultRulesEnabled = DefaultRulesEnabled;
            this.Rules = Rules;
        }

        /// <summary>
        /// Whether traffic shaping rules are applied to clients on your SSID.
        /// </summary>
        /// <value>Whether traffic shaping rules are applied to clients on your SSID.</value>
        [DataMember(Name="trafficShapingEnabled", EmitDefaultValue=false)]
        public bool? TrafficShapingEnabled { get; set; }
        /// <summary>
        /// Whether default traffic shaping rules are enabled (true) or disabled (false).     There are 4 default rules, which can     be seen on your network&#39;s traffic shaping page. Note that default rules     count against the rule limit of 8.
        /// </summary>
        /// <value>Whether default traffic shaping rules are enabled (true) or disabled (false).     There are 4 default rules, which can     be seen on your network&#39;s traffic shaping page. Note that default rules     count against the rule limit of 8.</value>
        [DataMember(Name="defaultRulesEnabled", EmitDefaultValue=false)]
        public bool? DefaultRulesEnabled { get; set; }
        /// <summary>
        /// An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules.
        /// </summary>
        /// <value>An array of traffic shaping rules. Rules are applied in the order that     they are specified in. An empty list (or null) means no rules. Note that     you are allowed a maximum of 8 rules.</value>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<Rule11> Rules { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateNetworkSsidTrafficShaping {\n");
            sb.Append("  TrafficShapingEnabled: ").Append(TrafficShapingEnabled).Append("\n");
            sb.Append("  DefaultRulesEnabled: ").Append(DefaultRulesEnabled).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return Equals(obj as UpdateNetworkSsidTrafficShaping);
        }

        /// <summary>
        /// Returns true if UpdateNetworkSsidTrafficShaping instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateNetworkSsidTrafficShaping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNetworkSsidTrafficShaping other)
        {
			// credit: http://stackoverflow.com/a/10454552/677735
			return other == null
					? false
					: (
						  TrafficShapingEnabled == other.TrafficShapingEnabled ||
						  (TrafficShapingEnabled != null &&
						  TrafficShapingEnabled.Equals(other.TrafficShapingEnabled))
					 ) &&
					 (
						  DefaultRulesEnabled == other.DefaultRulesEnabled ||
						  (DefaultRulesEnabled != null &&
						  DefaultRulesEnabled.Equals(other.DefaultRulesEnabled))
					 ) &&
					 (
						  Rules == other.Rules ||
						  (Rules != null &&
						  Rules.SequenceEqual(other.Rules))
					 );
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (TrafficShapingEnabled != null)
				{
					hash = (hash * 59) + TrafficShapingEnabled.GetHashCode();
				}

				if (DefaultRulesEnabled != null)
				{
					hash = (hash * 59) + DefaultRulesEnabled.GetHashCode();
				}

				if (Rules != null)
				{
					hash = (hash * 59) + Rules.GetHashCode();
				}

				return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
